"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[472],{66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},89737:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>m,data:()=>g});var t=a(20641);const e=a.p+"assets/img/image-20240120180848000.924de5ff.png",p=a.p+"assets/img/image-20240120182018969.d1bd4434.png",o=a.p+"assets/img/image-20240120182229805.c132b077.png",d=a.p+"assets/img/image-20240121102332562.24c55724.png",l=a.p+"assets/img/image-20240121102811237.6e74b6a8.png",c=a.p+"assets/img/image-20240121103503504.e48c5e67.png",i=a.p+"assets/img/image-20240121104255210.5ae4e85e.png",r=a.p+"assets/img/image-20240121104516378.1b198c62.png",u=[(0,t.Fv)('<h1 id="三、函数" tabindex="-1"><a class="header-anchor" href="#三、函数"><span>三、函数</span></a></h1><p><strong>函数的分类</strong></p><figure><img src="'+e+'" alt="image-20240120180848000" tabindex="0" loading="lazy"><figcaption>image-20240120180848000</figcaption></figure><ul><li>操作数据对象</li><li>接受参数返回一个结果</li><li><strong>只对一行进行变换</strong></li><li><strong>每行返回一个结果</strong></li><li>可以嵌套</li><li>参数可以是一列或一个值</li></ul><h2 id="_3-1-单行函数" tabindex="-1"><a class="header-anchor" href="#_3-1-单行函数"><span>3.1 单行函数</span></a></h2><h3 id="_3-1-1-数值函数" tabindex="-1"><a class="header-anchor" href="#_3-1-1-数值函数"><span>3.1.1 数值函数</span></a></h3><h4 id="_1-基本函数" tabindex="-1"><a class="header-anchor" href="#_1-基本函数"><span>（1）基本函数</span></a></h4><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>SIGN(X)</td><td>返回X的符号。正数返回1，负数返回-1，0返回0</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>CEIL(x)，CEILING(x)</td><td>返回大于或等于某个值的最小整数</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于某个值的最大整数</td></tr><tr><td>LEAST(e1,e2,e3…)</td><td>返回列表中的最小值</td></tr><tr><td>GREATEST(e1,e2,e3…)</td><td>返回列表中的最大值</td></tr><tr><td>MOD(x,y)</td><td>返回X除以Y后的余数</td></tr><tr><td>RAND()</td><td>返回0~1的随机值</td></tr><tr><td>RAND(x)</td><td>返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机 数</td></tr><tr><td>ROUND(x)</td><td>返回一个对x的值进行四舍五入后，最接近于X的整数</td></tr><tr><td>ROUND(x,y)</td><td>返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截断为y位小数的结果</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根。当X的值为负数时，返回NULL</td></tr></tbody></table><p><strong>RAND：随机数</strong></p><p>对于 RAND(x) 函数，如果种子相同的话，那么获取的随机数也是一样的！</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RAND<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RAND<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RAND<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>RAND<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+p+'" alt="image-20240120182018969" tabindex="0" loading="lazy"><figcaption>image-20240120182018969</figcaption></figure><p><strong>ROUND、TRUNCATE: 四舍五入、截断</strong></p><p>ROUND(12.324,-1)：-1看小数点前1位，尽心四舍五入</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>\n<span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">12.33</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">12.343</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ROUND</span><span class="token punctuation">(</span><span class="token number">12.324</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">TRUNCATE</span><span class="token punctuation">(</span><span class="token number">12.66</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">TRUNCATE</span><span class="token punctuation">(</span><span class="token number">12.66</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+o+'" alt="image-20240120182229805" tabindex="0" loading="lazy"><figcaption>image-20240120182229805</figcaption></figure><h4 id="_2-三角函数" tabindex="-1"><a class="header-anchor" href="#_2-三角函数"><span>（2）三角函数</span></a></h4><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>RADIANS(x)</td><td>将角度转化为弧度，其中，参数x为角度值</td></tr><tr><td>DEGREES(x)</td><td>将弧度转化为角度，其中，参数x为弧度值</td></tr><tr><td>SIN(x)</td><td>返回x的正弦值，其中，参数x为弧度值</td></tr><tr><td>ASIN(x)</td><td>返回x的反正弦值，即获取正弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>COS(x)</td><td>返回x的余弦值，其中，参数x为弧度值</td></tr><tr><td>ACOS(x)</td><td>返回x的反余弦值，即获取余弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>TAN(x)</td><td>返回x的正切值，其中，参数x为弧度值</td></tr><tr><td>ATAN(x)</td><td>返回x的反正切值，即返回正切值为x的值</td></tr><tr><td>COT(x)</td><td>返回x的余切值，其中，X为弧度值</td></tr><tr><td>ATAN2(m,n)</td><td>返回两个参数的反正切值</td></tr></tbody></table><h4 id="_4-指数和对数" tabindex="-1"><a class="header-anchor" href="#_4-指数和对数"><span>（4） 指数和对数</span></a></h4><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>POW(x,y)，POWER(X,Y)</td><td>返回x的y次方</td></tr><tr><td>EXP(X)</td><td>返回e的X次方，其中e是一个常数，2.718281828459045</td></tr><tr><td>LN(X)，LOG(X)</td><td>返回以e为底的X的对数，当X &lt;= 0 时，返回的结果为NULL</td></tr><tr><td>LOG10(X)</td><td>返回以10为底的X的对数，当X &lt;= 0 时，返回的结果为NULL</td></tr><tr><td>LOG2(X)</td><td>返回以2为底的X的对数，当X &lt;= 0 时，返回NULL</td></tr></tbody></table><h4 id="_5-进制间的转换" tabindex="-1"><a class="header-anchor" href="#_5-进制间的转换"><span>（5） 进制间的转换</span></a></h4><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>BIN(x)</td><td>返回x的二进制编码</td></tr><tr><td>HEX(x)</td><td>返回x的十六进制编码</td></tr><tr><td>OCT(x)</td><td>返回x的八进制编码</td></tr><tr><td>CONV(x,f1,f2)</td><td>返回f1进制数变成f2进制数</td></tr></tbody></table><h3 id="_3-1-2-字符串函数" tabindex="-1"><a class="header-anchor" href="#_3-1-2-字符串函数"><span>3.1.2 字符串函数</span></a></h3><blockquote><p>注意：MySQL中，字符串的位置是从1开始的。</p></blockquote><p>​</p><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>ASCII(S)</td><td>返回字符串S中的第一个字符的ASCII码值</td></tr><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的字节数，和字符集有关</td></tr><tr><td>CONCAT(s1,s2,......,sn)</td><td>连接s1,s2,......,sn为一个字符串</td></tr><tr><td>CONCAT_WS(x, s1,s2,......,sn)</td><td>同CONCAT(s1,s2,...)函数，但是每个字符串之间要加上x</td></tr><tr><td>INSERT(str, idx, len, replacestr)</td><td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td></tr><tr><td>REPLACE(str, a, b)</td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr><tr><td>UPPER(s) 或 UCASE(s)</td><td>将字符串s的所有字母转成大写字母</td></tr><tr><td>LOWER(s) 或LCASE(s)</td><td>将字符串s的所有字母转成小写字母</td></tr><tr><td>LEFT(str,n)</td><td>返回字符串str最左边的n个字符</td></tr><tr><td>RIGHT(str,n)</td><td>返回字符串str最右边的n个字符</td></tr><tr><td>LPAD(str, len, pad)</td><td>用字符串pad对str最左边进行填充，直到str的长度为len个字符</td></tr><tr><td>RPAD(str ,len, pad)</td><td>用字符串pad对str最右边进行填充，直到str的长度为len个字符</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s左侧的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s右侧的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串s开始与结尾的空格</td></tr><tr><td>TRIM(s1 FROM s)</td><td>去掉字符串s开始与结尾的s1</td></tr><tr><td>TRIM(LEADING s1 FROM s)</td><td>去掉字符串s开始处的s1</td></tr><tr><td>TRIM(TRAILING s1 FROM s)</td><td>去掉字符串s结尾处的s1</td></tr><tr><td>REPEAT(str, n)</td><td>返回str重复n次的结果</td></tr><tr><td>SPACE(n)</td><td>返回n个空格</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1,s2的ASCII码值的大小</td></tr><tr><td>SUBSTR(s,index,len)</td><td>返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、 MID(s,n,len)相同</td></tr><tr><td>LOCATE(substr,str)</td><td>返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substr IN str)、INSTR(str,substr)相同 。未找到，返回0</td></tr><tr><td>ELT(m,s1,s2,…,sn)</td><td>返回指定位置的字符串，如果m=1，则返回s1，如果m=2，则返回s2，如 果m=n，则返回sn</td></tr><tr><td>FIELD(s,s1,s2,…,sn)</td><td>返回字符串s在字符串列表中第一次出现的位置</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分 隔的字符串</td></tr><tr><td>REVERSE(s)</td><td>返回s反转后的字符串</td></tr><tr><td>NULLIF(value1,value2)</td><td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回 value1</td></tr></tbody></table><h3 id="_3-1-3-日期函数" tabindex="-1"><a class="header-anchor" href="#_3-1-3-日期函数"><span>3.1.3 日期函数</span></a></h3><h4 id="_1-获取日期、时间" tabindex="-1"><a class="header-anchor" href="#_1-获取日期、时间"><span>(1) 获取日期、时间</span></a></h4><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>CURDATE() ，CURRENT_DATE()</td><td>返回当前日期，只包含年、 月、日</td></tr><tr><td>CURTIME() ， CURRENT_TIME()</td><td>返回当前时间，只包含时、 分、秒</td></tr><tr><td>NOW() / SYSDATE() / CURRENT_TIMESTAMP() / LOCALTIME() / LOCALTIMESTAMP()</td><td>返回当前系统日期和时间</td></tr><tr><td>UTC_DATE()</td><td>返回UTC（世界标准时间） 日期</td></tr><tr><td>UTC_TIME()</td><td>返回UTC（世界标准时间） 时间</td></tr></tbody></table><p><strong>日期与时间戳的转换</strong></p><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>UNIX_TIMESTAMP()</td><td>以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP() - &gt;1634348884</td></tr><tr><td>UNIX_TIMESTAMP(date)</td><td>将时间date以UNIX时间戳的形式返回。</td></tr><tr><td>FROM_UNIXTIME(timestamp)</td><td>将UNIX时间戳的时间转换为普通格式的时间</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 获取日期与时间</span>\n<span class="token keyword">SELECT</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CURTIME<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UNIX_TIMESTAMP<span class="token punctuation">(</span>CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FROM_UNIXTIME<span class="token punctuation">(</span>UNIX_TIMESTAMP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+d+'" alt="image-20240121102332562" tabindex="0" loading="lazy"><figcaption>image-20240121102332562</figcaption></figure><h4 id="_2-获取月份、星期、星期数、天数等函数" tabindex="-1"><a class="header-anchor" href="#_2-获取月份、星期、星期数、天数等函数"><span>(2) 获取月份、星期、星期数、天数等函数</span></a></h4><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>YEAR(date) / MONTH(date) / DAY(date)</td><td>返回 年份/月份/天</td></tr><tr><td>HOUR(time) / MINUTE(time) / SECOND(time)</td><td>返回 时/分/秒</td></tr><tr><td>MONTHNAME(date)</td><td>返回月份：January，..</td></tr><tr><td>DAYNAME(date)</td><td>返回星期几：MONDAY，TUESDAY.....SUNDAY</td></tr><tr><td>WEEKDAY(date)</td><td>返回周几，注意，周1是0，周2是1，。。。周日是6</td></tr><tr><td>QUARTER(date)</td><td>返回日期对应的季度，范围为1～4</td></tr><tr><td>WEEK(date) ， WEEKOFYEAR(date)</td><td>返回一年中的第几周</td></tr><tr><td>DAYOFYEAR(date)</td><td>返回日期是一年中的第几天</td></tr><tr><td>DAYOFMONTH(date)</td><td>返回日期位于所在月份的第几天</td></tr><tr><td>DAYOFWEEK(date)</td><td>返回周几，注意：周日是1，周一是2，。。。周六是 7</td></tr><tr><td>EXTRACT(type FROM date)</td><td>返回指定日期中特定的部分，type指定返回的值</td></tr></tbody></table><p>EXTRACT(type FROM date)函数中type的取值与含义：</p><figure><img src="'+l+'" alt="image-20240121102811237" tabindex="0" loading="lazy"><figcaption>image-20240121102811237</figcaption></figure><h4 id="_3-时间和秒钟的转换" tabindex="-1"><a class="header-anchor" href="#_3-时间和秒钟的转换"><span>(3) 时间和秒钟的转换</span></a></h4><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>TIME_TO_SEC(time)</td><td>将 time 转化为秒并返回结果值。转化的公式为： 小时*3600+分钟 *60+秒</td></tr><tr><td>SEC_TO_TIME(seconds)</td><td>将 seconds 描述转化为包含小时、分钟和秒的时</td></tr></tbody></table><h4 id="_4-计算日期和时间的函数" tabindex="-1"><a class="header-anchor" href="#_4-计算日期和时间的函数"><span>(4) 计算日期和时间的函数</span></a></h4><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>DATE_ADD(datetime, INTERVAL expr type) ADDDATE(date,INTERVAL expr type)</td><td>返回与给定日期时间相差INTERVAL时 间段的日期时间</td></tr><tr><td>DATE_SUB(date,INTERVAL expr type)， SUBDATE(date,INTERVAL expr type)</td><td>返回与date相差INTERVAL时间间隔的 日期</td></tr></tbody></table><p>上述中type 的取值：</p><figure><img src="'+c+'" alt="image-20240121103503504" tabindex="0" loading="lazy"><figcaption>image-20240121103503504</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 后天</span>\n<span class="token keyword">SELECT</span> DATE_ADD<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">2</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span>\n<span class="token comment">--  前天</span>\n<span class="token keyword">SELECT</span> DATE_SUB<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">2</span> <span class="token keyword">DAY</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>ADDTIME(time1,time2)</td><td>返回time1加上time2的时间。当time2为一个数字时，代表的是 秒 ，可以为负数</td></tr><tr><td>SUBTIME(time1,time2)</td><td>返回time1减去time2后的时间。当time2为一个数字时，代表的 是 秒 ，可以为负数</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1 - date2的日期间隔天数</td></tr><tr><td>TIMEDIFF(time1, time2)</td><td>TIMEDIFF(time1, time2) 返</td></tr><tr><td>FROM_DAYS(N)</td><td>返回从0000年1月1日起，N天以后的日期</td></tr><tr><td>TO_DAYS(date</td><td>返回日期date距离0000年1月1日的天数</td></tr><tr><td>LAST_DAY(date)</td><td>返回date所在月份的最后一天的日期</td></tr><tr><td>MAKEDATE(year,n)</td><td>针对给定年份与所在年份中的天数返回一个日期</td></tr><tr><td>MAKETIME(hour,minute,second)</td><td>将给定的小时、分钟和秒组合成时间并返回</td></tr><tr><td>PERIOD_ADD(time,n</td><td>返回time加上n后的时间</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span>\nADDTIME<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SUBTIME<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>SUBTIME<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;1:1:3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>DATEDIFF<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;2021-10-\n01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\nTIMEDIFF<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;2021-10-25 22:10:10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>FROM_DAYS<span class="token punctuation">(</span><span class="token number">366</span><span class="token punctuation">)</span><span class="token punctuation">,</span>TO_DAYS<span class="token punctuation">(</span><span class="token string">&#39;0000-12-25&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\nLAST_DAY<span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>MAKEDATE<span class="token punctuation">(</span><span class="token keyword">YEAR</span><span class="token punctuation">(</span><span class="token function">NOW</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>MAKETIME<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span>PERIOD_ADD<span class="token punctuation">(</span><span class="token number">20200101010101</span><span class="token punctuation">,</span>\n<span class="token number">10</span><span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-日期的格式化与解析" tabindex="-1"><a class="header-anchor" href="#_5-日期的格式化与解析"><span>(5) 日期的格式化与解析</span></a></h4><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>DATE_FORMAT(date,fmt)</td><td>按照字符串fmt格式化日期date值</td></tr><tr><td>TIME_FORMAT(time,fmt)</td><td>按照字符串fmt格式化时间time值</td></tr><tr><td>GET_FORMAT(date_type,format_type)</td><td>返回日期字符串的显示格式</td></tr><tr><td>STR_TO_DATE(str, fmt)</td><td>按照字符串fmt对str进行解析，解析为一个日期</td></tr></tbody></table><p>上述函数 <strong>fmt</strong> 通用的格式：</p><figure><img src="'+i+'" alt="image-20240121104255210" tabindex="0" loading="lazy"><figcaption>image-20240121104255210</figcaption></figure><p>GET_FORMAT函数中date_type和format_type参数取值如下：</p><figure><img src="'+r+'" alt="image-20240121104516378" tabindex="0" loading="lazy"><figcaption>image-20240121104516378</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> STR_TO_DATE<span class="token punctuation">(</span><span class="token string">&#39;09/01/2009&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;%m/%d/%Y&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> STR_TO_DATE<span class="token punctuation">(</span><span class="token string">&#39;20140422154706&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;%Y%m%d%H%i%s&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> STR_TO_DATE<span class="token punctuation">(</span><span class="token string">&#39;2014-04-22 15:47:06&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;%Y-%m-%d %H:%i:%s&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> DUAL<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-1-4-流程控制函数" tabindex="-1"><a class="header-anchor" href="#_3-1-4-流程控制函数"><span>3.1.4 流程控制函数</span></a></h3><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。 MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><table><thead><tr><th>函数</th><th>解释</th></tr></thead><tbody><tr><td>IF(value,value1,value2)</td><td>如果value的值为TRUE，返回value1， 否则返回value2</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为NULL，返回value1，否 则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 .... [ELSE resultn] END</td><td>相当于Java的if...else if...else..</td></tr><tr><td>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 .... [ELSE 值n] END</td><td>相当于Java的switch...case..</td></tr></tbody></table><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">IF</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token string">&#39;正确&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;错误&#39;</span><span class="token punctuation">)</span>\n<span class="token operator">-</span><span class="token operator">&gt;</span>正确\n\n<span class="token keyword">SELECT</span> <span class="token keyword">CASE</span>\n<span class="token keyword">WHEN</span> <span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">0</span>\n<span class="token keyword">THEN</span> <span class="token string">&#39;1 &gt; 0&#39;</span>\n<span class="token keyword">WHEN</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">0</span>\n<span class="token keyword">THEN</span> <span class="token string">&#39;2 &gt; 0&#39;</span>\n<span class="token keyword">ELSE</span> <span class="token string">&#39;3 &gt; 0&#39;</span>\n<span class="token keyword">END</span>\n<span class="token operator">-</span><span class="token operator">&gt;</span><span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">0</span>\n\n\n\n<span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>salary<span class="token punctuation">,</span> <span class="token keyword">CASE</span> <span class="token keyword">WHEN</span> salary<span class="token operator">&gt;=</span><span class="token number">15000</span> <span class="token keyword">THEN</span> <span class="token string">&#39;高薪&#39;</span>\n<span class="token keyword">WHEN</span> salary<span class="token operator">&gt;=</span><span class="token number">10000</span> <span class="token keyword">THEN</span> <span class="token string">&#39;潜力股&#39;</span>\n<span class="token keyword">WHEN</span> salary<span class="token operator">&gt;=</span><span class="token number">8000</span> <span class="token keyword">THEN</span> <span class="token string">&#39;屌丝&#39;</span>\n<span class="token keyword">ELSE</span> <span class="token string">&#39;草根&#39;</span> <span class="token keyword">END</span> <span class="token string">&quot;描述&quot;</span>\n<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>\n\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-多行函数" tabindex="-1"><a class="header-anchor" href="#_3-2-多行函数"><span>3.2 多行函数</span></a></h2><h3 id="_3-2-1-聚合函数" tabindex="-1"><a class="header-anchor" href="#_3-2-1-聚合函数"><span>3.2.1 聚合函数</span></a></h3><p>聚合（或聚集、分组）函数，它是对 一组数据进行汇总的函数，<code>输入的是一组数据的集合，输出的是单个值</code>。</p><h4 id="_1-常用的聚合函数" tabindex="-1"><a class="header-anchor" href="#_1-常用的聚合函数"><span>(1) 常用的聚合函数</span></a></h4><p><strong>AVG()/SUM()</strong></p><p>AVG: 求平均值</p><p>SUM：求总和</p><p>只适用于数值类型的</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees\n<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>MAX()/MIN()</strong></p><p>MAX：最大值 MIN：最小值</p><p>可以适用于字符串、数值、日期类型！</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees\n<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>last_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MIN</span><span class="token punctuation">(</span>last_name<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>COUNT()</strong></p><p>COUNT(expr) 返回expr不为空的记录总数。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">FROM</span> employees\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这几个聚合函数都会自动过滤NULL值</p><p><strong>问题：用count(*)，count(1)，count(列名)谁好呢</strong></p><p>其实，对于MyISAM引擎的表是没有区别的。这种引擎内部有一计数器在维护着行数。</p><p>Innodb引擎的表用count(*),count(1)直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好于具体的count(列名)。</p><h4 id="_2-group-by" tabindex="-1"><a class="header-anchor" href="#_2-group-by"><span>(2) GROUP BY</span></a></h4><p>可以使用GROUP BY子句将表中的数据分成若干组</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">column</span><span class="token punctuation">,</span> group_function<span class="token punctuation">(</span><span class="token keyword">column</span><span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> <span class="token keyword">table</span>\n<span class="token punctuation">[</span><span class="token keyword">WHERE</span> condition<span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token keyword">GROUP</span> <span class="token keyword">BY</span> group_by_expression<span class="token punctuation">]</span>\n<span class="token punctuation">[</span><span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">column</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在SELECT列表中所有未包含在组函数中的列都应该包含在 GROUP BY子句中</p><p>反之， GROUP BY子句中的字段可以不出现在SELECT后</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-havign" tabindex="-1"><a class="header-anchor" href="#_3-havign"><span>(3) HAVIGN</span></a></h4><p><strong>作用</strong>：用来过滤数据的</p><p><strong>举例</strong>：查询各个部门中最高工资比10000高的部门信息</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 错误写法</span>\n<span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10000</span>\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>要求1</strong>：如果过滤条件中使用到啊了<code>聚合函数</code> ， 则必须使用<code> HAVING 替换 WHERE</code> 否则就会报错</p><p><strong>要求2</strong>： 如果要使用 HAVING，则必须在 GROUP BY 后面</p><p><strong>要求3</strong>： HAVIGN 一般会和 GROUP BY搭配使用，如果单独使用HAVING 不会报错，但是没有意义，将整个查询结果作为一组。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 正确写法</span>\n<span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id \n<span class="token keyword">HAVING</span> <span class="token function">MAX</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10000</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结论：</strong></p><p>当过滤条件中有聚合函数时，则过滤条件<code>一定</code>要放在HAVIGN中</p><p>当过滤条件中没有聚合函数时，则过滤条件放在 <code>WHERE和HAVING都可以</code>，但是建议放在WHERE中，<code>WEHRE 的执行效率会比放在 HAVIGN 中效率高</code></p><h4 id="_4-sql的完整结构及执行原理" tabindex="-1"><a class="header-anchor" href="#_4-sql的完整结构及执行原理"><span>(4) SQL的完整结构及执行原理</span></a></h4><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">ON</span> 多表的连接条件\n<span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">ON</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">WHERE</span> 不包含组函数的过滤条件\n<span class="token operator">AND</span><span class="token operator">/</span><span class="token operator">OR</span> 不包含组函数的过滤条件\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">HAVING</span> 包含组函数的过滤条件\n<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ASC</span><span class="token operator">/</span><span class="token keyword">DESC</span>\n<span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SQL的执行顺序</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">FROM</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword">LEFT</span><span class="token operator">/</span><span class="token keyword">RIGHT</span><span class="token punctuation">)</span> <span class="token keyword">JOIN</span> <span class="token keyword">ON</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">HAVING</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> 的字段 <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">DISTINCT</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">LIMIT</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> player_id<span class="token punctuation">,</span> player_name<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> num <span class="token comment"># 顺序 5</span>\n<span class="token keyword">FROM</span> player <span class="token keyword">JOIN</span> team <span class="token keyword">ON</span> player<span class="token punctuation">.</span>team_id <span class="token operator">=</span> team<span class="token punctuation">.</span>team_id <span class="token comment"># 顺序 1</span>\n<span class="token keyword">WHERE</span> height <span class="token operator">&gt;</span> <span class="token number">1.80</span> <span class="token comment"># 顺序 2</span>\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> player<span class="token punctuation">.</span>team_id <span class="token comment"># 顺序 3</span>\n<span class="token keyword">HAVING</span> num <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token comment"># 顺序 4</span>\n<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> num <span class="token keyword">DESC</span> <span class="token comment"># 顺序 6</span>\n<span class="token keyword">LIMIT</span> <span class="token number">2</span> <span class="token comment"># 顺序 7</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个 <code>虚拟表</code> ，然后将这个虚拟表传入下一个步 骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。</p><blockquote><p>了解了SQL的执行顺序，我们在来说为什么WHERE会比HAVIGN执行效率高，假设我们有百万条数据，在经历过WHERE之后可能就剩非常少的数据，在这些数据在分组, HAVIGN过滤就非常轻松了。</p><p>但是将条件放在HAVIGN中，先对百万条数据进行分组，这个操作就非常耗时了！</p></blockquote>',100)],k={},m=(0,a(66262).A)(k,[["render",function(n,s){return(0,t.uX)(),(0,t.CE)("div",null,u)}]]),g=JSON.parse('{"path":"/MySQL/03%E5%87%BD%E6%95%B0.html","title":"三、函数","lang":"zh-CN","frontmatter":{"date":"2024-03-28T00:00:00.000Z","category":["数据库"],"tag":["数据库","函数","MySQL"],"editLink":false,"pageview":false,"sticky":true,"star":true,"order":3,"description":"三、函数 函数的分类 image-20240120180848000image-20240120180848000 操作数据对象 接受参数返回一个结果 只对一行进行变换 每行返回一个结果 可以嵌套 参数可以是一列或一个值 3.1 单行函数 3.1.1 数值函数 （1）基本函数 RAND：随机数 对于 RAND(x) 函数，如果种子相同的话，那么获取的随...","head":[["meta",{"property":"og:url","content":"https://www.yzgc.top/MySQL/03%E5%87%BD%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"鲨瓜"}],["meta",{"property":"og:title","content":"三、函数"}],["meta",{"property":"og:description","content":"三、函数 函数的分类 image-20240120180848000image-20240120180848000 操作数据对象 接受参数返回一个结果 只对一行进行变换 每行返回一个结果 可以嵌套 参数可以是一列或一个值 3.1 单行函数 3.1.1 数值函数 （1）基本函数 RAND：随机数 对于 RAND(x) 函数，如果种子相同的话，那么获取的随..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-05T05:35:13.000Z"}],["meta",{"property":"article:author","content":"鲨瓜"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"函数"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2024-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-05T05:35:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"三、函数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-05T05:35:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鲨瓜\\",\\"url\\":\\"https://www.yzgc.top\\"}]}"]]},"headers":[{"level":2,"title":"3.1 单行函数","slug":"_3-1-单行函数","link":"#_3-1-单行函数","children":[{"level":3,"title":"3.1.1 数值函数","slug":"_3-1-1-数值函数","link":"#_3-1-1-数值函数","children":[]},{"level":3,"title":"3.1.2 字符串函数","slug":"_3-1-2-字符串函数","link":"#_3-1-2-字符串函数","children":[]},{"level":3,"title":"3.1.3 日期函数","slug":"_3-1-3-日期函数","link":"#_3-1-3-日期函数","children":[]},{"level":3,"title":"3.1.4 流程控制函数","slug":"_3-1-4-流程控制函数","link":"#_3-1-4-流程控制函数","children":[]}]},{"level":2,"title":"3.2 多行函数","slug":"_3-2-多行函数","link":"#_3-2-多行函数","children":[{"level":3,"title":"3.2.1 聚合函数","slug":"_3-2-1-聚合函数","link":"#_3-2-1-聚合函数","children":[]}]}],"git":{"createdTime":1712295313000,"updatedTime":1712295313000,"contributors":[{"name":"“杨照光”","email":"“yangzhaoguang@ciictec.com”","commits":1}]},"readingTime":{"minutes":12.02,"words":3605},"filePathRelative":"MySQL/03函数.md","localizedDate":"2024年3月28日","excerpt":"\\n<p><strong>函数的分类</strong></p>\\n<figure><figcaption>image-20240120180848000</figcaption></figure>\\n<ul>\\n<li>操作数据对象</li>\\n<li>接受参数返回一个结果</li>\\n<li><strong>只对一行进行变换</strong></li>\\n<li><strong>每行返回一个结果</strong></li>\\n<li>可以嵌套</li>\\n<li>参数可以是一列或一个值</li>\\n</ul>\\n<h2>3.1 单行函数</h2>\\n<h3>3.1.1 数值函数</h3>\\n<h4>（1）基本函数</h4>","autoDesc":true}')}}]);