"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[1381],{66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},64767:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>m,data:()=>v});var e=a(20641);const t=a.p+"assets/img/image-20240121190639539.37d024cc.png",p=a.p+"assets/img/image-20240121192239686.a16fe8e6.png",l=a.p+"assets/img/image-20240121192306003.375eebc5.png",i=a.p+"assets/img/image-20240121195145554.0be37055.png",o=a.p+"assets/img/image-20240121200231681.955eafea.png",c=a.p+"assets/img/image-20240121204418557.a75fe55b.png",d=a.p+"assets/img/image-20240121204606375.3e941488.png",r=a.p+"assets/img/image-20240121205834432.6b34595c.png",u=[(0,e.Fv)('<h1 id="四、子查询" tabindex="-1"><a class="header-anchor" href="#四、子查询"><span>四、子查询</span></a></h1><p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p><p>SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者 需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集 合）进行比较。</p><blockquote><p>子查询其实就相当于变成语言中的嵌套FOR循环</p></blockquote><h2 id="_4-1-提出需求并解决" tabindex="-1"><a class="header-anchor" href="#_4-1-提出需求并解决"><span>4.1 提出需求并解决</span></a></h2><figure><img src="'+t+'" alt="image-20240121190639539" tabindex="0" loading="lazy"><figcaption>image-20240121190639539</figcaption></figure><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">#方式一：</span>\n<span class="token keyword">SELECT</span> salary\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">&#39;Abel&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> salary <span class="token operator">&gt;</span> <span class="token number">11000</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">#方式二：自连接</span>\n<span class="token keyword">SELECT</span> e2<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>e2<span class="token punctuation">.</span>salary\n<span class="token keyword">FROM</span> employees e1<span class="token punctuation">,</span>employees e2\n<span class="token keyword">WHERE</span> e1<span class="token punctuation">.</span>last_name <span class="token operator">=</span> <span class="token string">&#39;Abel&#39;</span>\n<span class="token operator">AND</span> e1<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span> <span class="token operator">&lt;</span> e2<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>salary<span class="token punctuation">`</span></span>\n\n<span class="token comment">#方式三：子查询</span>\n<span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> salary <span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n                <span class="token keyword">SELECT</span> salary\n                <span class="token keyword">FROM</span> employees\n                <span class="token keyword">WHERE</span> last_name <span class="token operator">=</span> <span class="token string">&#39;Abel&#39;</span>\n                <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子查询（内查询）在主查询之前一次执行完成。</p><p>子查询的结果被主查询（外查询）使用 。</p><p><strong>注意事项</strong></p><ul><li>子查询要包含在括号内</li><li>将子查询放在比较条件的右侧</li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul><h2 id="_4-2-子查询的分类" tabindex="-1"><a class="header-anchor" href="#_4-2-子查询的分类"><span>4.2 子查询的分类</span></a></h2><p><strong>分类方式一</strong>：我们按内查询的结果返回一条还是多条记录，将子查询分为 <code>单行子查询</code> 、 <code>多行子查询</code> 。</p><p>单行子查询返回一条记录</p><figure><img src="'+p+'" alt="image-20240121192239686" tabindex="0" loading="lazy"><figcaption>image-20240121192239686</figcaption></figure><p>多行子查询返回多条记录</p><figure><img src="'+l+'" alt="image-20240121192306003" tabindex="0" loading="lazy"><figcaption>image-20240121192306003</figcaption></figure><p><strong>分类方式二</strong>：我们按内查询是否被执行多次，将子查询划分为 <code>相关(或关联)子查询</code> 和 <code>不相关(或非关联)子查询</code> 。</p><p>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条 件进行执行，那么这样的子查询叫做<code>不相关子查询</code>。</p><p>同样，如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查 询，然后再将结果反馈给外部，这种嵌套的执行方式就称为<code>相关子查询</code>。</p><h3 id="_4-2-1-单行子查询" tabindex="-1"><a class="header-anchor" href="#_4-2-1-单行子查询"><span>4.2.1 单行子查询</span></a></h3><h4 id="_1-单行比较操作符" tabindex="-1"><a class="header-anchor" href="#_1-单行比较操作符"><span>(1) 单行比较操作符</span></a></h4><figure><img src="'+i+'" alt="image-20240121195145554" tabindex="0" loading="lazy"><figcaption>image-20240121195145554</figcaption></figure><h4 id="_2-案例" tabindex="-1"><a class="header-anchor" href="#_2-案例"><span>(2) 案例</span></a></h4><p><strong>题目</strong>：返回公司<code>工资最少</code>的员工的last_name,job_id和salary</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> salary\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> salary <span class="token operator">=</span> <span class="token punctuation">(</span>\n    \t\t\t<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>\n\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目</strong>：查询<code>与141号员工的manager_id和department_id相同的其他</code>员工的employee_id， manager_id，department_id</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 实现方式一</span>\n<span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> manager_id<span class="token punctuation">,</span> department_id\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> manager_id <span class="token operator">=</span> <span class="token punctuation">(</span>\n\t\t\t\t\t\t\t\t\t\t<span class="token keyword">SELECT</span> manager_id\n\t\t\t\t\t\t\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t\t\t\t\t\t\t<span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">141</span>\n\t\t\t\t\t\t\t\t\t\t<span class="token punctuation">)</span>\n<span class="token operator">AND</span> department_id <span class="token operator">=</span> <span class="token punctuation">(</span>\n\t\t\t\t\t\t\t\t\t\t<span class="token keyword">SELECT</span> department_id\n\t\t\t\t\t\t\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t\t\t\t\t\t\t<span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">141</span>\n\t\t\t\t\t\t\t\t\t\t<span class="token punctuation">)</span>\n<span class="token operator">AND</span> employee_id <span class="token operator">!=</span> <span class="token number">141</span>\n\n<span class="token comment">-- 实现方式二</span>\n<span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> manager_id<span class="token punctuation">,</span> department_id\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>department_id<span class="token punctuation">,</span>manager_id<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>                                                                            <span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span>manager_id\n                                   <span class="token keyword">FROM</span> employees\n                                   <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> <span class="token number">141</span>\n\t\t\t\t\t\t\t\t\t<span class="token punctuation">)</span>\n<span class="token operator">AND</span> employee_id <span class="token operator">!=</span> <span class="token number">141</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-having中的子查询" tabindex="-1"><a class="header-anchor" href="#_3-having中的子查询"><span>(3) HAVING中的子查询</span></a></h4><p><strong>题目</strong>：查询<code>最低工资大于50号部门最低工资的</code> 部门id和其最低工资</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id\n<span class="token keyword">HAVING</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n\t\t\t\t\t\t\t\t\t\t\t<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>\n\t\t\t\t\t\t\t\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t\t\t\t\t\t\t\t<span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> <span class="token number">50</span>\n\t\t\t\t\t\t\t\t\t\t <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-case-中的子查询" tabindex="-1"><a class="header-anchor" href="#_4-case-中的子查询"><span>(4) CASE 中的子查询</span></a></h4><p><strong>题目</strong>：显式员工的employee_id,last_name和location。<code>其中，若员工department_id与location_id为1800 的department_id相同，则location为’Canada’，其余则为’USA’</code>。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span>\n<span class="token punctuation">(</span><span class="token keyword">CASE</span> department_id <span class="token keyword">WHEN</span>\n<span class="token punctuation">(</span><span class="token keyword">SELECT</span> department_id <span class="token keyword">FROM</span> departments <span class="token keyword">WHERE</span> location_id <span class="token operator">=</span> <span class="token number">1800</span><span class="token punctuation">)</span>\n<span class="token keyword">THEN</span> <span class="token string">&#39;Canada&#39;</span> <span class="token keyword">ELSE</span> <span class="token string">&#39;USA&#39;</span> <span class="token keyword">END</span><span class="token punctuation">)</span> <span class="token string">&quot;location&quot;</span>\n<span class="token keyword">FROM</span> employees<span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-2-多行子查询" tabindex="-1"><a class="header-anchor" href="#_4-2-2-多行子查询"><span>4.2.2 多行子查询</span></a></h3><ul><li>也称为集合比较子查询</li><li>内查询返回多行</li><li>使用多行比较操作符</li></ul><h4 id="_1-多行比较操作符" tabindex="-1"><a class="header-anchor" href="#_1-多行比较操作符"><span>(1) 多行比较操作符</span></a></h4><figure><img src="'+o+'" alt="image-20240121200231681" tabindex="0" loading="lazy"><figcaption>image-20240121200231681</figcaption></figure><h4 id="_2-案例-1" tabindex="-1"><a class="header-anchor" href="#_2-案例-1"><span>(2) 案例</span></a></h4><p><strong>题目</strong>：返回<code>其它job_id中比job_id为‘IT_PROG’部门【任一】工资都低的员工的</code>员工号、姓名、job_id以及 salary</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>salary\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> job_id <span class="token operator">!=</span> <span class="token string">&#39;IT_PROG&#39;</span>\n<span class="token operator">AND</span> salary <span class="token operator">&lt;</span> <span class="token keyword">ANY</span><span class="token punctuation">(</span>\n\t\t\t\t\t\t\t\t<span class="token keyword">SELECT</span> salary\n\t\t\t\t\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t\t\t\t\t<span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token string">&#39;IT_PROG&#39;</span>\n\t\t\t\t\t\t\t\t<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目</strong>：返回<code>其它job_id中比job_id为‘IT_PROG’部门【所有】工资都低的员工的</code>员工号、姓名、job_id以及 salary</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>last_name<span class="token punctuation">,</span>job_id<span class="token punctuation">,</span>salary\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> job_id <span class="token operator">!=</span> <span class="token string">&#39;IT_PROG&#39;</span>\n<span class="token operator">AND</span> salary <span class="token operator">&lt;</span> <span class="token keyword">ALL</span><span class="token punctuation">(</span>\n\t\t\t\t\t\t\t\t<span class="token keyword">SELECT</span> salary\n\t\t\t\t\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t\t\t\t\t<span class="token keyword">WHERE</span> job_id <span class="token operator">=</span> <span class="token string">&#39;IT_PROG&#39;</span>\n\t\t\t\t\t\t\t\t<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目</strong>：查询平均工资最低的部门id</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment">-- 错误的，聚合函数不能嵌套</span>\n<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询出所有部门的平均工资</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;avg_salary&quot;</span>\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将结果作为一张新表，查询出这个新表中最低的平均工资</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>avg_salary<span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> <span class="token punctuation">(</span>\n\t<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;avg_salary&quot;</span>\n\t<span class="token keyword">FROM</span> employees\n\t<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id\n\t<span class="token punctuation">)</span>  dept_avg_salary\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询平均工资等于这个最低的平均工资的部门ID</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> department_id\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id\n<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span>\n\t\t\t\t\t\t<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>avg_salary<span class="token punctuation">)</span>\n\t\t\t\t\t\t<span class="token keyword">FROM</span> <span class="token punctuation">(</span>\n\t\t\t\t\t\t\t<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;avg_salary&quot;</span>\n\t\t\t\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t\t\t\t<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id\n\t\t\t\t\t\t\t<span class="token punctuation">)</span>  dept_avg_salary\n\t\t\t\t\t<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优化</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> department_id\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id\n<span class="token keyword">HAVING</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">ALL</span> <span class="token punctuation">(</span>\n\t\t\t\t\t\t\t<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;avg_salary&quot;</span>\n\t\t\t\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t\t\t\t<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id\n\t\t\t\t\t\t  <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-3-相关子查询" tabindex="-1"><a class="header-anchor" href="#_4-2-3-相关子查询"><span>4.2.3 相关子查询</span></a></h3><p>如果子查询的执行依赖于外部查询，通常情况下都是因为<code>子查询中的表用到了外部的表</code>，并进行了条件 关联，因此每执行一次外部查询，子查询都要<code>重新计算一次</code>，这样的子查询就称之为 <code>关联子查询 </code>。</p><p>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p><figure><img src="'+c+'" alt="image-20240121204418557" tabindex="0" loading="lazy"><figcaption>image-20240121204418557</figcaption></figure><figure><img src="'+d+'" alt="image-20240121204606375" tabindex="0" loading="lazy"><figcaption>image-20240121204606375</figcaption></figure><p><strong>说明：</strong> 子查询中使用主查询的列</p><p><strong>题目</strong>：查询员工<code>中工资大于本部门平均工资的员工</code>的last_name,salary和其department_id</p><p>由外向里思考：</p><p><strong>第一种方式</strong>：</p><ul><li>先查询出员工的last_name,salary和其department_id</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>department_id\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">WHERE</span> salary <span class="token operator">&gt;</span> <span class="token punctuation">(</span>本部门的平均工资<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>查询本部门的平均工资 <ul><li>需要注意的是：这个本部门是要使用到主查询中的部门ID，它不是固定的，子查询中使用到了主查询中的列，这就是相关子查询！！！！</li></ul></li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> last_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>department_id\n<span class="token keyword">FROM</span> employees e\n<span class="token keyword">WHERE</span> salary <span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n\t\t\t\t<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span>\n\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t<span class="token keyword">WHERE</span> department_id <span class="token operator">=</span> e<span class="token punctuation">.</span>department_id\n\t\t\t\t<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+r+'" alt="image-20240121205834432" tabindex="0" loading="lazy"><figcaption>image-20240121205834432</figcaption></figure><p><strong>第二种方式：</strong></p><p>查询结果都能当做一张新表使用，我们可以将每个部门的ID、平均工资查询出来当做一张新表。</p><p>将主表与这个新表进行连接，通过部门ID查询出工资比平均工资大的员工</p><ul><li>将每个部门的ID、平均工资查询出来当做一张新表</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;avg_salary&quot;</span>\n<span class="token keyword">FROM</span> employees\n<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将主表与这个新表进行连接，通过部门ID查询出工资比平均工资大的员工</li></ul><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> e1<span class="token punctuation">.</span>last_name<span class="token punctuation">,</span>salary<span class="token punctuation">,</span>e1<span class="token punctuation">.</span>department_id\n<span class="token keyword">FROM</span> employees e1<span class="token punctuation">,</span> <span class="token punctuation">(</span>\n\t\t\t\t\t<span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span><span class="token function">AVG</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token string">&quot;avg_salary&quot;</span>\n\t\t\t\t\t<span class="token keyword">FROM</span> employees\n\t\t\t\t\t<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> department_id \n\t\t\t\t\t<span class="token punctuation">)</span> t_dept_avg_salary\n<span class="token keyword">WHERE</span> e1<span class="token punctuation">.</span>department_id <span class="token operator">=</span> t_dept_avg_salary<span class="token punctuation">.</span>department_id\n<span class="token operator">AND</span> e1<span class="token punctuation">.</span>salary <span class="token operator">&gt;</span>  t_dept_avg_salary<span class="token punctuation">.</span>avg_salary\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项：</strong></p><ul><li>在子查询中如果用到聚合函数作为列，一定要为其起一个别名，类似上面的 &quot;avg_salary&quot;</li><li>俩张表连接，至少要有一个连接条件，否则会出现 &quot;笛卡尔积&quot;</li></ul><p><strong>题目</strong>：查询员工的id,salary,<code>按照department_name 排序</code></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span>salary\n<span class="token keyword">FROM</span> employees e\n<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>\n            <span class="token keyword">SELECT</span> department_name\n            <span class="token keyword">FROM</span> departments d\n            <span class="token keyword">WHERE</span> e<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span></span> <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>department_id<span class="token punctuation">`</span></span>\n\t\t  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>题目</strong>：若employees表中employee_id与job_history表中employee_id相同的数目不小于2，输出这些相同 id的员工的employee_id,last_name和其job_id</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> e<span class="token punctuation">.</span>employee_id<span class="token punctuation">,</span> last_name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>job_id\n<span class="token keyword">FROM</span> employees e\n<span class="token keyword">WHERE</span> <span class="token number">2</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>\n            <span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>\n            <span class="token keyword">FROM</span> job_history\n            <span class="token keyword">WHERE</span> employee_id <span class="token operator">=</span> e<span class="token punctuation">.</span>employee_id\n           <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>结论</strong>: 除了GROUP BY 和 LIMIT不能使用子查询，其他地方都可以使用！</p>',81)],k={},m=(0,a(66262).A)(k,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,u)}]]),v=JSON.parse('{"path":"/MySQL/04%E5%AD%90%E6%9F%A5%E8%AF%A2.html","title":"四、子查询","lang":"zh-CN","frontmatter":{"date":"2024-03-28T00:00:00.000Z","category":["数据库"],"tag":["数据库","MySQL"],"editLink":false,"pageview":false,"sticky":true,"star":true,"order":4,"description":"四、子查询 子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。 SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者 需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集 合）进行比较。 子查询其实就相当于变成语言中的嵌套F...","head":[["meta",{"property":"og:url","content":"https://www.yzgc.top/MySQL/04%E5%AD%90%E6%9F%A5%E8%AF%A2.html"}],["meta",{"property":"og:site_name","content":"鲨瓜"}],["meta",{"property":"og:title","content":"四、子查询"}],["meta",{"property":"og:description","content":"四、子查询 子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。 SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者 需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集 合）进行比较。 子查询其实就相当于变成语言中的嵌套F..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-05T05:35:13.000Z"}],["meta",{"property":"article:author","content":"鲨瓜"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2024-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-05T05:35:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"四、子查询\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-05T05:35:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鲨瓜\\",\\"url\\":\\"https://www.yzgc.top\\"}]}"]]},"headers":[{"level":2,"title":"4.1 提出需求并解决","slug":"_4-1-提出需求并解决","link":"#_4-1-提出需求并解决","children":[]},{"level":2,"title":"4.2 子查询的分类","slug":"_4-2-子查询的分类","link":"#_4-2-子查询的分类","children":[{"level":3,"title":"4.2.1 单行子查询","slug":"_4-2-1-单行子查询","link":"#_4-2-1-单行子查询","children":[]},{"level":3,"title":"4.2.2 多行子查询","slug":"_4-2-2-多行子查询","link":"#_4-2-2-多行子查询","children":[]},{"level":3,"title":"4.2.3 相关子查询","slug":"_4-2-3-相关子查询","link":"#_4-2-3-相关子查询","children":[]}]}],"git":{"createdTime":1712295313000,"updatedTime":1712295313000,"contributors":[{"name":"“杨照光”","email":"“yangzhaoguang@ciictec.com”","commits":1}]},"readingTime":{"minutes":6.06,"words":1817},"filePathRelative":"MySQL/04子查询.md","localizedDate":"2024年3月28日","excerpt":"\\n<p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p>\\n<p>SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者 需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集 合）进行比较。</p>\\n<blockquote>\\n<p>子查询其实就相当于变成语言中的嵌套FOR循环</p>\\n</blockquote>\\n<h2>4.1 提出需求并解决</h2>\\n<figure><figcaption>image-20240121190639539</figcaption></figure>","autoDesc":true}')}}]);