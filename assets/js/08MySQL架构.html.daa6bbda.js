"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[330],{66262:(e,n)=>{n.A=(e,n)=>{const a=e.__vccOpts||e;for(const[e,s]of n)a[e]=s;return a}},73017:(e,n,a)=>{a.r(n),a.d(n,{comp:()=>d,data:()=>m});var s=a(20641);const i=a.p+"assets/img/image-20240303143605705.9c537ab5.png",l=a.p+"assets/img/image-20240303144634632.7c6e6bdd.png",t=a.p+"assets/img/image-20240303145041888.4e94ac0d.png",o=a.p+"assets/img/image-20240303145118032.8503c525.png",c=a.p+"assets/img/image-20240303150535429.744b70aa.png",r=[(0,s.Fv)('<h1 id="八、-mysql架构" tabindex="-1"><a class="header-anchor" href="#八、-mysql架构"><span>八、 MYSQL架构</span></a></h1><h2 id="_8-1-逻辑架构剖析" tabindex="-1"><a class="header-anchor" href="#_8-1-逻辑架构剖析"><span>8.1 逻辑架构剖析</span></a></h2><p>首先 MySQL 是典型的 C/s 架构，即 client/Server 架构，服务器端程序使用的 mysqld</p><p>不论客户端进程和服务器进程是采用哪种方式进行通信，最后实现的效果都是:<strong>客户端进程向服务器进程发送一段文本(SOL语句)段文本，服务器进程处理后在向客户端进程发送一段文本(处理结果)，</strong></p><figure><img src="'+i+'" alt="image-20240303143605705" tabindex="0" loading="lazy"><figcaption>image-20240303143605705</figcaption></figure><h3 id="_8-1-1-第一层-连接层" tabindex="-1"><a class="header-anchor" href="#_8-1-1-第一层-连接层"><span>8.1.1 第一层：连接层</span></a></h3><p>系统（客户端）访问 MySQL 服务器前，做的第一件事就是建立<code>TCP 连接</code> ， 经过三次握手建立连接成功后， MySQL 服务器对 TCP 传输过来的账号密码做身份认证、权限获取。</p><ul><li>用户名或密码不对，会收到一个<code>Access denied for user</code>错误，客户端程序结束执行</li><li>用户名密码认证通过，会从权限表查出账号拥有的权限与连接关联，之后的权限判断逻辑，都将依 赖于此时读到的权限</li></ul><p>TCP 连接收到请求后，必须要分配给一个线程专门与这个客户端的交互。所以还会有个线程池，去走后 面的流程。每一个连接从线程池中获取线程，省去了创建和销毁线程的开销。</p><h3 id="_8-1-2-第二层-服务层" tabindex="-1"><a class="header-anchor" href="#_8-1-2-第二层-服务层"><span>8.1.2 第二层：服务层</span></a></h3><h4 id="sql接口" tabindex="-1"><a class="header-anchor" href="#sql接口"><span>SQL接口</span></a></h4><ul><li><p>接收用户的SQL命令，并且返回用户需要查询的结果。比如SELECT ... FROM就是调用SQL Interface</p></li><li><p>MySQL支持DML（数据操作语言）、DDL（数据定义语言）、存储过程、视图、触发器、自定 义函数等多种SQL语言接口</p></li></ul><h4 id="parser-解析器" tabindex="-1"><a class="header-anchor" href="#parser-解析器"><span>Parser: 解析器</span></a></h4><ul><li>在解析器中对 SQL 语句进行语法分析、语义分析。将SQL语句分解成数据结构，并将这个结构 传递到后续步骤，以后SQL语句的传递和处理就是基于这个结构的。如果在分解构成中遇到错 误，那么就说明这个SQL语句是不合理的</li><li>在SQL命令传递到解析器的时候会被解析器验证和解析，并为其创建 典丰富查询语法树，会 语法树，并根据数据字 验证该客户端是否具有执行该查询的权限。创建好语法树后，MySQL还 会对SQl查询进行语法上的优化，进行查询重写。</li></ul><h4 id="optimizer-查询优化器" tabindex="-1"><a class="header-anchor" href="#optimizer-查询优化器"><span>Optimizer: 查询优化器</span></a></h4><ul><li>SQL语句在语法解析之后、查询之前会使用查询优化器确定 SQL 语句的执行路径，生成一个 <code>执行计划</code>。</li><li>这个执行计划表明应该 使用哪些索引进行查询（全表检索还是使用索引检索），表之间的连 接顺序如何，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将 查询结果返回给用户。</li></ul><h4 id="caches-buffers-查询缓存组件" tabindex="-1"><a class="header-anchor" href="#caches-buffers-查询缓存组件"><span>Caches &amp; Buffers： 查询缓存组件</span></a></h4><ul><li>MySQL内部维持着一些Cache和Buffer，比如Query Cache用来缓存一条SELECT语句的执行结 果，如果能够在其中找到对应的查询结果，那么就不必再进行查询解析、优化和执行的整个过程了，直接将结果反馈给客户端。</li><li>这个缓存机制是由一系列小缓存组成的。比如表缓存，记录缓存，key缓存，权限缓存等</li><li>这个查询缓存可以在 不同客户端之间共享。</li><li>从MySQL 5.7.20开始，不推荐使用查询缓存，并在 MySQL 8.0中删除</li></ul><h3 id="_8-1-3-第三层-引擎层" tabindex="-1"><a class="header-anchor" href="#_8-1-3-第三层-引擎层"><span>8.1.3 第三层：引擎层</span></a></h3><p>插件式存储引擎层（ Storage Engines），<code>真正的负责了MySQL中数据的存储和提取，对物理服务器级别 维护的底层数据执行操作</code>，服务器通过API与存储引擎进行通信。不同的存储引擎具有的功能不同</p><p>MySQL 8.0.25默认支持的存储引擎如下</p><figure><img src="'+l+'" alt="image-20240303144634632" tabindex="0" loading="lazy"><figcaption>image-20240303144634632</figcaption></figure><h3 id="_8-1-4-第四层-存储层" tabindex="-1"><a class="header-anchor" href="#_8-1-4-第四层-存储层"><span>8.1.4 第四层：存储层</span></a></h3><p>所有的数据，数据库、表的定义，表的每一行的内容，索引，都是存在 文件系统上，以 文件的方式存 在的，并完成与存储引擎的交互。当然有些存储引擎比如InnoDB，也支持不使用文件系统直接管理裸设 备，但现代文件系统的实现使得这样做没有必要了。在文件系统之下，可以使用本地磁盘，可以使用 DAS、NAS、SAN等各种存储系统。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><figure><img src="'+t+'" alt="image-20240303145041888" tabindex="0" loading="lazy"><figcaption>image-20240303145041888</figcaption></figure><p>简化为三层结构：</p><ol><li>连接层：客户端和服务器端建立连接，客户端发送 SQL 至服务器端；</li><li>SQL 层（服务层）：对 SQL 语句进行查询处理；与数据库文件的存储方式无关；</li><li>存储引擎层：与数据库文件打交道，负责数据的存储和读取。</li></ol><h2 id="_8-2-sql执行流程" tabindex="-1"><a class="header-anchor" href="#_8-2-sql执行流程"><span>8.2 SQL执行流程</span></a></h2><figure><img src="'+o+'" alt="image-20240303145118032" tabindex="0" loading="lazy"><figcaption>image-20240303145118032</figcaption></figure><p>1、**查询缓存:**Server 如果在查询缓存中发现了这条 SQL 语句，就会直接将结果返回给客户端；如果没有，就进入到解析器阶段。需要说明的是，因为<code>查询缓存往往效率不高</code>，所以在 <code>MySQL8.0 之后就抛弃</code> 了这个功能</p><p>2、<strong>解析器</strong>： 在解析器中对 SQL 语句进行语法分析、语义分析</p><p>分析器先做“ 词法分析”。你输入的是由多个字符串和空格组成的一条 SQL 语句，MySQL 需要识别出里面 的字符串分别是什么，代表什么。 MySQL 从你输入的&quot;select&quot;这个关键字识别出来，这是一个查询语 句。它也要把字符串“T”识别成“表名 T”，把字符串“ID”识别成“列 ID”。</p><p>4、<strong>优化器：</strong>：在优化器中会确定 SQL 语句的执行路径，比如是根据 <code>全表检索</code>，还是根据<code>索引检索</code>等。</p><p>在查询优化器中，可以分为 <code>逻辑查询优化阶段</code>和 <code>物理查询优化阶段</code>。</p><p>5、<strong>执行器</strong> 截止到现在，还没有真正去读写真实的表，仅仅只是产出了一个执行计划。于是就进入了 执行器阶段。</p><p>在执行之前需要判断该用户是否 具备权限。如果没有，就会返回权限错误。如果具备权限，就执行 SQL 查询并返回结果。在 MySQL8.0 以下的版本，如果设置了查询缓存，这时会将查询结果进行缓存。</p><p>SQL 语句在 MySQL 中的流程是： <strong>SQL语句→查询缓存→解析器→优化器→执行器</strong>。</p><figure><img src="'+c+'" alt="image-20240303150535429" tabindex="0" loading="lazy"><figcaption>image-20240303150535429</figcaption></figure><h2 id="_8-3-存储引擎" tabindex="-1"><a class="header-anchor" href="#_8-3-存储引擎"><span>8.3 存储引擎</span></a></h2><p>为了管理方便，人们把 <code>连接管理 、 査询缓存 、 语法解析、 査询优化</code> 这些并不涉及真实数据存储的功能划分为<code>MySQL server 的功能</code>，把<code>真实存取数据的功能划</code>分为 <code>存储引擎</code>的功能。</p><p>所以在 MySQL server 完成了查询优化后，只需按照生成的 执行计划 调用底层存储引擎提供的 API，获取到数据后返回给客户端就好了。</p><p>MySQL中提到了存储引擎的概念。简而言之，<code>存储引擎就是指表的类型，表以什么文件格式存储</code>。 其实存储引擎以前叫做<code>表处理器</code>，后来改名为 <code>存储引擎</code> ，它的功能就是接收上层传下来的指令，然后对表中的数据进行提取或写入操作。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token comment"># 查看MYSQL的存储引擎</span>\n<span class="token keyword">SHOW</span> ENGINES\n<span class="token comment"># MEMORY</span>\n<span class="token comment"># MRG_MYISAM</span>\n<span class="token comment"># CSV</span>\n<span class="token comment"># FEDERATED</span>\n<span class="token comment"># PERFORMANCE_SCHEMA</span>\n<span class="token comment"># MyISAM</span>\n<span class="token comment"># InnoDB</span>\n<span class="token comment"># ndbinfo</span>\n<span class="token comment"># BLACKHOLE</span>\n<span class="token comment"># ARCHIVE</span>\n<span class="token comment"># ndbcluster</span>\n\n<span class="token comment"># 查看默认的存储引擎</span>\n<span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">&#39;%storage_engine%&#39;</span><span class="token punctuation">;</span> \n\n\n<span class="token comment"># 临时修改存储引擎</span>\n<span class="token keyword">SET</span> DEFAULT_STORAGE_ENGINE<span class="token operator">=</span>MyISAM<span class="token punctuation">;</span>\n\n<span class="token comment"># 永久生效，修改 my.cnf 文件：</span>\n<span class="token keyword">default</span><span class="token operator">-</span>storage<span class="token operator">-</span><span class="token keyword">engine</span><span class="token operator">=</span>MyISAM\n <span class="token comment"># 重启服务</span>\nsystemctl restart mysqld<span class="token punctuation">.</span>service\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-1-innodb引擎" tabindex="-1"><a class="header-anchor" href="#_8-3-1-innodb引擎"><span>8.3.1 InnoDB引擎</span></a></h3><ul><li>MySQL从3.23.34a开始就包含InnoDB存储引擎。 <strong>大于等于5.5之后，默认采用InnoDB引擎</strong>。</li><li>InnoDB是MySQL的 <strong>默认事务型引擎</strong>，它被设计用来处理大量的短期(short-lived)事务。可以确保事务 的完整提交(Commit)和回滚(Rollback)。</li><li><strong>除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎</strong></li><li>数据文件结构： <ul><li>表名.frm 存储表结构（MySQL8.0时，合并在表名.ibd中）</li><li>表名.ibd 存储数据和索引</li></ul></li><li>InnoDB是 为处理巨大数据量的最大性能设计。</li><li>对比MyISAM的存储引擎， InnoDB写的处理效率差一些，并且会占用更多的磁盘空间以保存数据和 索引。</li><li>MyISAM只缓存索引，不缓存真实数据；InnoDB不仅缓存索引还要缓存真实数据，因此占用内存 高，而且内存大小对性能有决定性的影响。</li></ul><h3 id="_8-3-2-myisam引擎" tabindex="-1"><a class="header-anchor" href="#_8-3-2-myisam引擎"><span>8.3.2 MyISAM引擎</span></a></h3><ul><li>MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，但<code>MyISAM不支持事务、行级锁、外键</code>，有一个毫无疑问的缺陷就是<code>崩溃后无法安全恢复</code>。</li><li>优势是访问的<code>速度快</code>，对事务完整性没有要求或者以SELECT、INSERT为主的应用 <ul><li>这是因为 MyISAM<strong>不需要维护额外的事务日志和事务控制</strong></li><li>数据和索引存储在不同的文件中，这可以使 MyISAM 更容易进行快速的全表扫描</li></ul></li><li>针对数据统计有额外的常数存储。故而 count(*) 的查询效率很高</li><li>数据文件结构： <ul><li>表名.frm 存储表结构</li><li>表名.MYD 存储数据 (MYData)</li><li>表名.MYI 存储索引 (MYIndex)</li></ul></li><li>应用场景：只读应用或者以读为主的业务</li></ul><h1 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h1>',49)],p={},d=(0,a(66262).A)(p,[["render",function(e,n){return(0,s.uX)(),(0,s.CE)("div",null,r)}]]),m=JSON.parse('{"path":"/MySQL/08MySQL%E6%9E%B6%E6%9E%84.html","title":"八、 MYSQL架构","lang":"zh-CN","frontmatter":{"date":"2024-03-28T00:00:00.000Z","category":["数据库"],"tag":["数据库","MySQL"],"editLink":false,"pageview":false,"sticky":true,"star":true,"order":8,"description":"八、 MYSQL架构 8.1 逻辑架构剖析 首先 MySQL 是典型的 C/s 架构，即 client/Server 架构，服务器端程序使用的 mysqld 不论客户端进程和服务器进程是采用哪种方式进行通信，最后实现的效果都是:客户端进程向服务器进程发送一段文本(SOL语句)段文本，服务器进程处理后在向客户端进程发送一段文本(处理结果)， image-...","head":[["meta",{"property":"og:url","content":"https://www.yzgc.top/MySQL/08MySQL%E6%9E%B6%E6%9E%84.html"}],["meta",{"property":"og:site_name","content":"鲨瓜"}],["meta",{"property":"og:title","content":"八、 MYSQL架构"}],["meta",{"property":"og:description","content":"八、 MYSQL架构 8.1 逻辑架构剖析 首先 MySQL 是典型的 C/s 架构，即 client/Server 架构，服务器端程序使用的 mysqld 不论客户端进程和服务器进程是采用哪种方式进行通信，最后实现的效果都是:客户端进程向服务器进程发送一段文本(SOL语句)段文本，服务器进程处理后在向客户端进程发送一段文本(处理结果)， image-..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-05T05:35:13.000Z"}],["meta",{"property":"article:author","content":"鲨瓜"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2024-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-05T05:35:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"八、 MYSQL架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-05T05:35:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鲨瓜\\",\\"url\\":\\"https://www.yzgc.top\\"}]}"]]},"headers":[{"level":2,"title":"8.1 逻辑架构剖析","slug":"_8-1-逻辑架构剖析","link":"#_8-1-逻辑架构剖析","children":[{"level":3,"title":"8.1.1 第一层：连接层","slug":"_8-1-1-第一层-连接层","link":"#_8-1-1-第一层-连接层","children":[]},{"level":3,"title":"8.1.2 第二层：服务层","slug":"_8-1-2-第二层-服务层","link":"#_8-1-2-第二层-服务层","children":[]},{"level":3,"title":"8.1.3 第三层：引擎层","slug":"_8-1-3-第三层-引擎层","link":"#_8-1-3-第三层-引擎层","children":[]},{"level":3,"title":"8.1.4 第四层：存储层","slug":"_8-1-4-第四层-存储层","link":"#_8-1-4-第四层-存储层","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"8.2 SQL执行流程","slug":"_8-2-sql执行流程","link":"#_8-2-sql执行流程","children":[]},{"level":2,"title":"8.3 存储引擎","slug":"_8-3-存储引擎","link":"#_8-3-存储引擎","children":[{"level":3,"title":"8.3.1 InnoDB引擎","slug":"_8-3-1-innodb引擎","link":"#_8-3-1-innodb引擎","children":[]},{"level":3,"title":"8.3.2 MyISAM引擎","slug":"_8-3-2-myisam引擎","link":"#_8-3-2-myisam引擎","children":[]}]}],"git":{"createdTime":1712295313000,"updatedTime":1712295313000,"contributors":[{"name":"“杨照光”","email":"“yangzhaoguang@ciictec.com”","commits":1}]},"readingTime":{"minutes":8.16,"words":2447},"filePathRelative":"MySQL/08MySQL架构.md","localizedDate":"2024年3月28日","excerpt":"\\n<h2>8.1 逻辑架构剖析</h2>\\n<p>首先 MySQL 是典型的 C/s 架构，即 client/Server 架构，服务器端程序使用的 mysqld</p>\\n<p>不论客户端进程和服务器进程是采用哪种方式进行通信，最后实现的效果都是:<strong>客户端进程向服务器进程发送一段文本(SOL语句)段文本，服务器进程处理后在向客户端进程发送一段文本(处理结果)，</strong></p>\\n<figure><figcaption>image-20240303143605705</figcaption></figure>\\n<h3>8.1.1 第一层：连接层</h3>\\n<p>系统（客户端）访问 MySQL 服务器前，做的第一件事就是建立<code>TCP 连接</code> ， 经过三次握手建立连接成功后， MySQL 服务器对  TCP 传输过来的账号密码做身份认证、权限获取。</p>","autoDesc":true}')}}]);