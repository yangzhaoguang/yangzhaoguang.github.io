"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[923],{6262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},9408:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>o,data:()=>c});var e=a(641);const p=[(0,e.Fv)('<h1 id="十一、索引的创建与设计原则" tabindex="-1"><a class="header-anchor" href="#十一、索引的创建与设计原则"><span>十一、索引的创建与设计原则</span></a></h1><h2 id="_11-1-索引的声明与使用" tabindex="-1"><a class="header-anchor" href="#_11-1-索引的声明与使用"><span>11.1 索引的声明与使用</span></a></h2><h3 id="_11-1-1-索引的分类" tabindex="-1"><a class="header-anchor" href="#_11-1-1-索引的分类"><span>11.1.1 索引的分类</span></a></h3><p>MySQL的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。</p><p>从<strong>功能逻辑</strong>上说，索引主要有 4 种，分别是普通索引、唯一索引、主键索引、全文索引。</p><p>按照 <strong>物理实现</strong> 方式，索引可以分为 2 种：聚簇索引和非聚簇索引。</p><p>按照 <strong>作用字段个数</strong>进行划分，分成单列索引和联合索引</p><p><strong>（1）普通索引</strong></p><p>在创建普通索引时，<code>不附加任何限制条件，只是用于提高查询效率</code>。这类索引可以创建在 <code>任何数据类型</code> 中，其值是否唯一和非空，要由字段本身的完整性约束条件决定。建立索引以后，可以通过索引进行查询。</p><p><strong>（2）唯一性索引</strong></p><p>使用 UNIQUE参数 可以设置索引为唯一性索引，在创建唯一性索引时，限制该索引的值必须是唯一的，但允许有空值。在一张数据表里 <code>可以有多个 唯一索引</code>。</p><p><strong>（3）主键索引</strong></p><p>主键索引就是一种 特殊的唯一性索引，在唯一索引的基础上增加了不为空的约束，也就是 NOT NULL+UNIQUE，一张表里 最多<code>只有一个 主键索引</code>。</p><p><code>why?</code> 这是由主键索引的物理实现方式决定的，因为数据存储在文件中只能按照一种顺序进行存储。</p><p><strong>（4）单列索引</strong></p><p>在表中的单个字段上创建索引。单列索引只根据该字段进行索引。单列索引可以是普通索引，也可以是唯一性索.还可以是全文索引。只要保证该索引只对应一个字段即可。一个表可以 有多个 单列索引,</p><p><strong>（5）多列(组合、联合)索引</strong></p><p>多列索引是在表的 <code>多个字段组合 </code>上创建一个索引。该索引指向创建时对应的多个字段，可以通过这几个字段进行查询，但是只有查询条件中使用了这些字段中的第一个字段时才会被使用。例如，在表中的字段id、name和gender上建立一个多列索引 idx_id_name_gender ，只有在査询条件中使用了字段id时该索引才会被使用。使用组合索引时遵循 最左前缀集合。</p><p><strong>（6）全文索引</strong></p><p>全文索引(也称全文检索)是目前 搜索引擎 使用的一种关键技术。它能够利用【分词技术 】等多种算法智能分析出文本文字中关键词的频率和重要性，然后按照一定的算法规则智能地筛选出我们想要的搜索结果。全文索引非常适合大型数据集，对于小的数据集，&quot;它的用处比较小。</p><h3 id="_11-1-2-增加、删除索引" tabindex="-1"><a class="header-anchor" href="#_11-1-2-增加、删除索引"><span>11.1.2 增加、删除索引</span></a></h3><p>MySQL支持多种方法在单个或多个列上创建索引:在创建表的定义语句<code> CREATE IABLE</code> 中指定索引列，使用<code>ALTER TABLE</code>语在存在的表上创建索引，或者使用 <code>CREATE INDEX</code>语句在已已存在的表上添加索引。</p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> dept<span class="token punctuation">(</span>\n dept_id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n dept_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>\n <span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> emp<span class="token punctuation">(</span>\n emp_id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n emp_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>\n dept_id <span class="token keyword">INT</span><span class="token punctuation">,</span>\n <span class="token keyword">CONSTRAINT</span> emp_dept_id_fk <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> dept<span class="token punctuation">(</span>dept_id<span class="token punctuation">)</span>\n <span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n <span class="token comment"># 查看索引</span>\n  <span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> emp\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种通过在字段上声明 主键约束、外键约束、唯一性约束 会字段创建出索引！！(隐式方式)</p><p><strong>显示的创建索引</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> table_name <span class="token punctuation">[</span>col_name data_type<span class="token punctuation">]</span> （\n \t<span class="token comment">-- 字段信息</span>\n <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT <span class="token operator">|</span> SPATIAL<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">INDEX</span> <span class="token operator">|</span> <span class="token keyword">KEY</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>index_name<span class="token punctuation">]</span> <span class="token punctuation">(</span>col_name <span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> \n<span class="token keyword">DESC</span><span class="token punctuation">]</span>\n）\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UNIQUE 、 FULLTEXT 和 SPATIAL 为可选参数，分别表示唯一索引、全文索引和空间索引</p><ul><li>INDEX 与 KEY 为同义词，两者的作用相同，用来指定创建索引；</li><li>index_name 指定索引的名称，为可选参数，如果不指定，那么MySQL默认col_name为索引名；</li><li>col_name 为需要创建索引的字段列，该列必须从数据表中定义的多个列中选择；</li><li>length 为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度；</li><li>ASC 或 DESC 指定升序或者降序的索引值存储。</li></ul><p><strong>创建表之后增加索引</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">ADD</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT <span class="token operator">|</span> SPATIAL<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">INDEX</span> <span class="token operator">|</span> <span class="token keyword">KEY</span><span class="token punctuation">]</span> <span class="token punctuation">[</span>index_name<span class="token punctuation">]</span> <span class="token punctuation">(</span>col_name<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span>\n \n <span class="token comment">-- 或者</span>\n \n<span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span> <span class="token operator">|</span> FULLTEXT <span class="token operator">|</span> SPATIAL<span class="token punctuation">]</span> <span class="token keyword">INDEX</span> index_name\n <span class="token keyword">ON</span> table_name <span class="token punctuation">(</span>col_name<span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">ASC</span> <span class="token operator">|</span> <span class="token keyword">DESC</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删除索引</strong></p><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name<span class="token punctuation">;</span>\n<span class="token comment">-- 或者</span>\n<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> table_name\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-1-3-索引的设计原则" tabindex="-1"><a class="header-anchor" href="#_11-1-3-索引的设计原则"><span>11.1.3 索引的设计原则</span></a></h3><h4 id="_1-哪些情况适合创建索引" tabindex="-1"><a class="header-anchor" href="#_1-哪些情况适合创建索引"><span>（1）哪些情况适合创建索引</span></a></h4><p><strong>1、字段的数值有唯一性的限制</strong></p><p>业务上具有唯一特性的字段，即使是组合字段，也必须建成唯一索引。（来源：Alibaba）</p><p>说明：不要以为唯一索引影响了 insert 速度，这个速度损耗可以忽略，但提高查找速度是明显的。</p><p><strong>2、频繁作为 WHERE 查询条件的字段</strong></p><p><strong>3、经常 GROUP BY 和 ORDER BY 的列</strong></p><p>索引就是让数据按照某种顺序进行存储或检索，因此当我们使用 GROUP BY 对数据进行分组查询，或者 使用 ORDER BY 对数据进行排序的时候，就需要 <code>对分组或者排序的字段进行索引</code>。如果待排序的列有多 个，那么可以在这些列上建立 组合索引。</p><p><strong>4、 UPDATE、DELETE 的 WHERE 条件列</strong></p><p><strong>5、DISTINCT 字段需要创建索引</strong></p><p><strong>6、多表 JOIN 连接操作时，创建索引注意事项:</strong></p><p>首先， <code>连接表的数量尽量不要超过 3 张</code>，因为每增加一张表就相当于增加了一次嵌套的循环，数量级增 长会非常快，严重影响查询的效率。</p><p>其次， <code>对 WHERE 条件创建索引</code>，因为 WHERE 才是对数据条件的过滤。如果在数据量非常大的情况下， 没有 WHERE 条件过滤是非常可怕的。</p><p>最后， <code>对用于连接的字段创建索引，并且该字段在多张表中的 类型必须一致</code>。比如 course_id 在 student_info 表和 course 表中都为 int(11) 类型，而不能一个为 int 另一个为 varchar 类型。</p><p><strong>7、使用列的类型小的创建索引</strong></p><p>我们这里所说的 类型大小 指的就是该类型表示的数据范围的大小</p><p><strong>8、使用字符串前缀创建索引</strong></p><p>在使用varchar作为索引时，一定要指明长度！！</p><p><strong>9、区分度高(散列性高)的列适合作为索引</strong></p><p>列的基数指的是某一列中不重复数据的个数，比方说某个列包含值2，5，8，2，5，8，2，5，8，虽然有9条记录，但该列的基数却是3。</p><p>也就是说，&quot;在记录行数一定的情况下，<code>列的基数越大，该列中的值越分散;列的基数越小，该列中的值越集中</code>。&quot;这个列的基数指标非常重要，直接影响我们是否能有效的利用索引。<code>最好为列的基数大的列建立索引</code>，为基数太小列的建立索引效果可能不好</p><p>可以使用公式<code> select count(distinct a)/count(*)from t1</code>&#39;计算区分度，越接近1越好，一般超过 33% 就算是比较高效的索引了。</p><p><strong>10、使用最频繁的列放到联合索引的左侧</strong></p><p><strong>11、在多个字段都要创建索引的情况下，联合索引优于单值索引</strong></p><h4 id="_2-哪些情况不适合创建索引" tabindex="-1"><a class="header-anchor" href="#_2-哪些情况不适合创建索引"><span>（2）哪些情况不适合创建索引</span></a></h4><p><strong>1、 在where中使用不到的字段，不要设置索引</strong></p><p><strong>2. 数据量小的表最好不要使用索引</strong></p><p><strong>3、 有大量重复数据的列上不要建立索引</strong></p><p>在学生表的“ 性别”字段上只有“男”与“女”两个不同值，因此无须建立索引。 反而会严重降低数据更新速度:如果建立索引，不但不会提高查询效率</p><p><strong>4、避免对经常更新的表创建过多的索引</strong></p><p>第一层含义:频繁更新的字段不一定要创建索引。因为更新数据的时候，也需要更新索引，如果索引太多，在更新索引的时候也会造成负担，从而影响效率。</p><p>第二层含义:避免对经常更新的表创建过多的索引，并且索引中的列尽可能少。此时，虽然提高了查询速度，同时却会降低更新表的速度。</p><p><strong>5、不建议用无序的值作为索引</strong></p><p>例如：UUID、身份证号、无需长字符串。。。</p><p><strong>6、删除不再使用或者很少使用的索引</strong></p><p><strong>7、不要定义冗余或重复的索引</strong></p>',68)],t={},o=(0,a(6262).A)(t,[["render",function(n,s){return(0,e.uX)(),(0,e.CE)("div",null,p)}]]),c=JSON.parse('{"path":"/MySQL/11%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html","title":"十一、索引的创建与设计原则","lang":"zh-CN","frontmatter":{"date":"2024-03-28T00:00:00.000Z","category":["数据库"],"tag":["数据库","MySQL"],"editLink":false,"pageview":false,"sticky":true,"star":true,"order":11,"description":"十一、索引的创建与设计原则 11.1 索引的声明与使用 11.1.1 索引的分类 MySQL的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。 从功能逻辑上说，索引主要有 4 种，分别是普通索引、唯一索引、主键索引、全文索引。 按照 物理实现 方式，索引可以分为 2 种：聚簇索引和非聚簇索引。 按照 作用字段个数进行划分，分成单...","head":[["meta",{"property":"og:url","content":"https://www.yzgc.top/MySQL/11%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html"}],["meta",{"property":"og:site_name","content":"鲨瓜"}],["meta",{"property":"og:title","content":"十一、索引的创建与设计原则"}],["meta",{"property":"og:description","content":"十一、索引的创建与设计原则 11.1 索引的声明与使用 11.1.1 索引的分类 MySQL的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。 从功能逻辑上说，索引主要有 4 种，分别是普通索引、唯一索引、主键索引、全文索引。 按照 物理实现 方式，索引可以分为 2 种：聚簇索引和非聚簇索引。 按照 作用字段个数进行划分，分成单..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-05T05:35:13.000Z"}],["meta",{"property":"article:author","content":"鲨瓜"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"MySQL"}],["meta",{"property":"article:published_time","content":"2024-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-05T05:35:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"十一、索引的创建与设计原则\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-05T05:35:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鲨瓜\\",\\"url\\":\\"https://www.yzgc.top\\"}]}"]]},"headers":[{"level":2,"title":"11.1 索引的声明与使用","slug":"_11-1-索引的声明与使用","link":"#_11-1-索引的声明与使用","children":[{"level":3,"title":"11.1.1 索引的分类","slug":"_11-1-1-索引的分类","link":"#_11-1-1-索引的分类","children":[]},{"level":3,"title":"11.1.2 增加、删除索引","slug":"_11-1-2-增加、删除索引","link":"#_11-1-2-增加、删除索引","children":[]},{"level":3,"title":"11.1.3 索引的设计原则","slug":"_11-1-3-索引的设计原则","link":"#_11-1-3-索引的设计原则","children":[]}]}],"git":{"createdTime":1712295313000,"updatedTime":1712295313000,"contributors":[{"name":"“杨照光”","email":"“yangzhaoguang@ciictec.com”","commits":1}]},"readingTime":{"minutes":7.49,"words":2248},"filePathRelative":"MySQL/11索引的创建与设计原则.md","localizedDate":"2024年3月28日","excerpt":"\\n<h2>11.1 索引的声明与使用</h2>\\n<h3>11.1.1 索引的分类</h3>\\n<p>MySQL的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。</p>\\n<p>从<strong>功能逻辑</strong>上说，索引主要有 4 种，分别是普通索引、唯一索引、主键索引、全文索引。</p>\\n<p>按照 <strong>物理实现</strong> 方式，索引可以分为 2 种：聚簇索引和非聚簇索引。</p>\\n<p>按照 <strong>作用字段个数</strong>进行划分，分成单列索引和联合索引</p>\\n<p><strong>（1）普通索引</strong></p>","autoDesc":true}')}}]);