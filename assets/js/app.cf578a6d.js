"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[3524],{61709:(e,t,n)=>{n.d(t,{l:()=>a});const a={category:{"/":{path:"/category/",map:{算法:{path:"/category/算法/",indexes:[0,1,2,3,4,5,6,7,8,9]},微服务:{path:"/category/微服务/",indexes:[10,11]},数据库:{path:"/category/数据库/",indexes:[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]},Redis:{path:"/category/redis/",indexes:[33]}}}},tag:{"/":{path:"/tag/",map:{二叉树:{path:"/tag/二叉树/",indexes:[0]},二叉树遍历:{path:"/tag/二叉树遍历/",indexes:[0]},平衡二叉树:{path:"/tag/平衡二叉树/",indexes:[0]},搜索二叉树:{path:"/tag/搜索二叉树/",indexes:[0]},动态规划:{path:"/tag/动态规划/",indexes:[1]},哈希表:{path:"/tag/哈希表/",indexes:[2]},回溯:{path:"/tag/回溯/",indexes:[3]},图论:{path:"/tag/图论/",indexes:[4]},字符串:{path:"/tag/字符串/",indexes:[5]},滑动窗口:{path:"/tag/滑动窗口/",indexes:[5]},数组:{path:"/tag/数组/",indexes:[6]},二分法:{path:"/tag/二分法/",indexes:[6]},栈:{path:"/tag/栈/",indexes:[7]},队列:{path:"/tag/队列/",indexes:[7]},贪心:{path:"/tag/贪心/",indexes:[8]},链表:{path:"/tag/链表/",indexes:[9]},"SpringCloud Alibaba":{path:"/tag/springcloud-alibaba/",indexes:[10]},Nacos:{path:"/tag/nacos/",indexes:[10]},Sentinel:{path:"/tag/sentinel/",indexes:[10]},Seata:{path:"/tag/seata/",indexes:[10]},SpringCloud:{path:"/tag/springcloud/",indexes:[11]},Consul:{path:"/tag/consul/",indexes:[11]},GateWay:{path:"/tag/gateway/",indexes:[11]},ZipKin:{path:"/tag/zipkin/",indexes:[11]},OpenFeign:{path:"/tag/openfeign/",indexes:[11]},Resilience4J:{path:"/tag/resilience4j/",indexes:[11]},数据库:{path:"/tag/数据库/",indexes:[12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]},MySQL:{path:"/tag/mysql/",indexes:[33,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]},函数:{path:"/tag/函数/",indexes:[14]},缓存:{path:"/tag/缓存/",indexes:[33]},数据一致性:{path:"/tag/数据一致性/",indexes:[33]}}}}}},94776:(e,t,n)=>{n.d(t,{M:()=>a});const a=["/LeetCode/%E4%BA%8C%E5%8F%89%E6%A0%91.html","/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html","/LeetCode/%E5%93%88%E5%B8%8C%E8%A1%A8.html","/LeetCode/%E5%9B%9E%E6%BA%AF.html","/LeetCode/%E5%9B%BE%E8%AE%BA.html","/LeetCode/%E5%AD%97%E7%AC%A6%E4%B8%B2.html","/LeetCode/%E6%95%B0%E7%BB%84.html","/LeetCode/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97.html","/LeetCode/%E8%B4%AA%E5%BF%83.html","/LeetCode/%E9%93%BE%E8%A1%A8.html","/Microservices/SpringCloud%20Alibaba.html","/Microservices/SpringCloud.html","/MySQL/01%E6%A6%82%E8%BF%B0.html","/MySQL/02SQL.html","/MySQL/03%E5%87%BD%E6%95%B0.html","/MySQL/04%E5%AD%90%E6%9F%A5%E8%AF%A2.html","/MySQL/05%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8.html","/MySQL/06MySQL%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html","/MySQL/07%E7%BA%A6%E6%9D%9F.html","/MySQL/08MySQL%E6%9E%B6%E6%9E%84.html","/MySQL/09%E7%B4%A2%E5%BC%95.html","/MySQL/10InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.html","/MySQL/11%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html","/MySQL/12%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8.html","/MySQL/13%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E4%B8%8E%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96.html","/MySQL/14%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html","/MySQL/15%E4%BA%8B%E5%8A%A1.html","/MySQL/16%E9%94%81.html","/MySQL/17MVCC.html","/MySQL/18%E6%97%A5%E5%BF%97.html","/MySQL/19%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html","/MySQL/20%E5%A4%87%E4%BB%BD.html","/MySQL/21%E9%99%84%E5%BD%95.html","/Redis/%E7%BC%93%E5%AD%98%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98.html"]},53781:(e,t,n)=>{n.d(t,{U:()=>a});const a={article:{"/":{path:"/article/",indexes:[33,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,0,1,2,3,4,5,6,7,8,9]}},star:{"/":{path:"/star/",indexes:[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]}},timeline:{"/":{path:"/timeline/",indexes:[33,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]}}}},86757:(e,t,n)=>{n.d(t,{B:()=>I});var a=n(8278),o=n(23812),l=n(13073),i=n(79403),p=n(70596),d=n(38831);const s=(0,a.re)({enhance:({app:e})=>{(0,o.L4)("FontIcon")||e.component("FontIcon",i.A),(0,o.L4)("Badge")||e.component("Badge",p.A),(0,o.L4)("VPCard")||e.component("VPCard",d.A)},setup:()=>{(0,l.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,l.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,l.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]});var r=n(26358),c=n(99588),h=n(80355),g=n(60560),E=n(31599),m=n(45496),y=n(40593),u=n(73825),A=n(47152),L=n(5214),B=n(81219),M=n(83027),S=n(79884),f=n(69589);const b=(0,a.re)({enhance:({app:e})=>{e.component("CodeTabs",A.A),(0,o.L4)("CodeGroup",e)||e.component("CodeGroup",L.lF),(0,o.L4)("CodeGroupItem",e)||e.component("CodeGroupItem",L.E7),e.component("CodeDemo",B.A),e.component("MdDemo",M.A),e.component("Tabs",f.A)},setup:()=>{(0,S.n)()}});var C=n(23004),Q=n(98940),w=n(80783),F=n(38465),z=n(20641),D=n(18030),v=n(79920);(0,F.M_)((e=>{const t=e.t,n=!1!==e.I,a=e.i;return n?{title:t,content:a?()=>[(0,z.h)(w.GB,{icon:a}),t]:null,order:e.O,index:e.I}:null}));const k=(0,a.re)({enhance:({app:e,router:t})=>{const{scrollBehavior:n}=t.options;t.options.scrollBehavior=async(...e)=>(await(0,w.MK)().wait(),n(...e)),(0,w.fk)(e),e.component("HopeIcon",w.GB),e.component("BloggerInfo",D.tI),e.component("GlobalEncrypt",v.J),e.component("LocalEncrypt",v.n)},setup:()=>{(0,w.PV)(),(0,w.i$)(),(0,D.su)()},layouts:{Layout:w.PE,NotFound:w.Mk,BlogCategory:D.Pn,BlogHome:D.qX,BlogType:D.z7,Timeline:D.Kf}}),I=[{},s,r.A,c.A,h.A,g.A,E.A,m.A,y.A,u.A,b,C.A,Q.A,k]},68164:(e,t,n)=>{n.d(t,{J:()=>o,c:()=>a});const a=JSON.parse("{}"),o=Object.fromEntries([["/",{loader:()=>n.e(4470).then(n.bind(n,84298)),meta:{y:"h",t:"主页",i:"home"}}],["/LeetCode/%E4%BA%8C%E5%8F%89%E6%A0%91.html",{loader:()=>n.e(2684).then(n.bind(n,71174)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["二叉树","二叉树遍历","平衡二叉树","搜索二叉树"],e:"\n<figure><figcaption>二叉树大纲</figcaption></figure>\n<p><strong>满二叉树</strong>：</p>\n<ol>\n<li>对于k层的二叉树来说，拥有 2<sup>k</sup> -1 个结点的二叉树称为满二叉树</li>\n<li>度为0的结点(叶子结点)都在同一层上</li>\n</ol>\n<figure><figcaption>image-20231030212729924</figcaption></figure>\n<p><strong>完全二叉树：</strong></p>\n<ol>\n<li>二叉树的结点位置按照对应的完全二叉树的位置相吻合</li>\n<li>最后一层的结点，一定是从左往右依次排满的</li>\n</ol>",r:{minutes:58.11,words:17434},y:"a",t:"二叉树",O:5}}],["/LeetCode/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92.html",{loader:()=>n.e(8021).then(n.bind(n,70443)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["动态规划"],e:'\n<p><strong>动态规划与贪心的区别：</strong></p>\n<ul>\n<li>动态规划的每一步都是由上一步推导出来来的</li>\n<li>贪心则是每一步尽量选择最优解，与上一步没有关系</li>\n</ul>\n<p><strong>动态规划五部曲</strong>：</p>\n<ul>\n<li>确定dp数组（dp table）以及下标的含义</li>\n<li>确定递推公式</li>\n<li>dp数组如何初始化</li>\n<li>确定遍历顺序</li>\n<li>举例推导dp数组</li>\n</ul>\n<h2><a class="header-anchor" href="#_509-斐波那契数"><span></span></a><a href="https://leetcode.cn/problems/fibonacci-number/" target="_blank" rel="noopener noreferrer">509. 斐波那契数</a></h2>',r:{minutes:80.14,words:24041},y:"a",t:"动态规划",O:8}}],["/LeetCode/%E5%93%88%E5%B8%8C%E8%A1%A8.html",{loader:()=>n.e(2438).then(n.bind(n,90044)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["哈希表"],e:'\n<h2><a class="header-anchor" href="#_242-有效的字母异位词"><span></span></a><a href="https://leetcode.cn/problems/valid-anagram/" target="_blank" rel="noopener noreferrer">242. 有效的字母异位词</a></h2>\n<p>给定两个字符串 <code>*s*</code> 和 <code>*t*</code> ，编写一个函数来判断 <code>*t*</code> 是否是 <code>*s*</code> 的字母异位词。</p>\n<p>**注意：**若 <code>*s*</code> 和 <code>*t*</code> 中每个字符出现的次数都相同，则称 <code>*s*</code> 和 <code>*t*</code> 互为字母异位词。</p>',r:{minutes:12.61,words:3782},y:"a",t:"哈希表",O:4}}],["/LeetCode/%E5%9B%9E%E6%BA%AF.html",{loader:()=>n.e(5307).then(n.bind(n,8542)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["回溯"],e:"\n<h2>简单介绍</h2>\n<p>回溯就是一种搜索的方式，它通常用于在搜索过程中<code>撤销</code>或<code>回退</code>一些步骤，以便在发现错误或达到某种条件时重新尝试其他路径。</p>\n<p>回溯算法的效率其实并不高，虽然可以通过<code>剪枝操作</code>来提高效一些效率，但是效率仍然不高！</p>\n<p><strong>通过回溯做的题目类型</strong>：</p>\n<ul>\n<li>组合问题：N个数里面按一定规则找出k个数的集合</li>\n<li>切割问题：一个字符串按一定规则有几种切割方式</li>\n<li>子集问题：一个N个数的集合里有多少符合条件的子集</li>\n<li>排列问题：N个数按一定规则全排列，有几种排列方式</li>\n<li>棋盘问题：N皇后，解数独等等</li>\n</ul>",r:{minutes:42.29,words:12686},y:"a",t:"回溯",O:6}}],["/LeetCode/%E5%9B%BE%E8%AE%BA.html",{loader:()=>n.e(7496).then(n.bind(n,28781)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["图论"],e:"\n<h2>dfs 和 bfs 的区别</h2>\n<p>深度优先遍历(dfs): 顺着一个方向遍历，就像是不到黄河不回头，直到没有元素了，再换另一个方向继续遍历。</p>\n<p>广度优先遍历(bfs): 先遍历与本节点连接的所有节点，然后在遍历与下一个节点相连接的所有节点</p>\n<p>其实<strong>dfs就是回溯</strong>，当遍历到头时，就需要回溯换另一个方向继续遍历。在二叉树中的递归遍历其实就是 dfs，而迭代遍历就是 bfs。</p>\n<p><strong>下面通过俩张动图，体会一下dfs和bfs的区别</strong>：</p>\n<p><strong>dfs</strong>：</p>",r:{minutes:15.53,words:4659},y:"a",t:"图论",O:9}}],["/LeetCode/%E5%AD%97%E7%AC%A6%E4%B8%B2.html",{loader:()=>n.e(7959).then(n.bind(n,32707)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["字符串","滑动窗口"],e:'\n<h2>双指针系列</h2>\n<h3><a class="header-anchor" href="#_14-最长公共前缀"><span></span></a><a href="https://leetcode.cn/problems/longest-common-prefix/" target="_blank" rel="noopener noreferrer">14. 最长公共前缀</a></h3>\n<p><a href="https://leetcode.cn/problems/longest-common-prefix/solutions/2459021/problem-14-zui-chang-gong-gong-qian-zhui-tlgr/" target="_blank" rel="noopener noreferrer">LeetCode题解</a></p>',r:{minutes:10.89,words:3266},y:"a",t:"字符串",O:2}}],["/LeetCode/%E6%95%B0%E7%BB%84.html",{loader:()=>n.e(5320).then(n.bind(n,18666)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["数组","二分法"],e:'\n<h2>217 存在重复元素</h2>\n<p>给你一个整数数组 <code>nums</code> 。如果任一值在数组中出现 <strong>至少两次</strong> ，返回 <code>true</code> ；如果数组中每个元素互不相同，返回 <code>false</code> 。</p>\n<p><strong>示例 1：</strong></p>\n<div class="language-text" data-ext="text" data-title="text"><pre class="language-text"><code>输入：nums = [1,2,3,1]\n输出：true\n</code></pre></div>',r:{minutes:39.71,words:11914},y:"a",t:"数组",O:1}}],["/LeetCode/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97.html",{loader:()=>n.e(866).then(n.bind(n,99459)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["栈","队列"],e:'\n<h2><a class="header-anchor" href="#_232-用栈实现队列"><span></span></a><a href="https://leetcode.cn/problems/implement-queue-using-stacks/" target="_blank" rel="noopener noreferrer">232. 用栈实现队列</a></h2>\n<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p>',r:{minutes:11.74,words:3523},y:"a",t:"栈和队列",O:5}}],["/LeetCode/%E8%B4%AA%E5%BF%83.html",{loader:()=>n.e(3691).then(n.bind(n,34185)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["贪心"],e:"\n<p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p>\n<p>例如，有一堆钞票，你可以拿走十张，如果想达到最大的金额，你要怎么拿？</p>\n<p>指定每次拿最大的，最终结果就是拿走最大数额的钱。</p>\n<p>每次拿最大的就是局部最优，最后拿走最大数额的钱就是推出全局最优。</p>\n<p><strong>贪心算法一般分为如下四步</strong>：</p>\n<ul>\n<li>将问题分解为若干个子问题</li>\n<li>找出适合的贪心策略</li>\n<li>求解每一个子问题的最优解</li>\n<li>将局部最优解堆叠成全局最优解</li>\n</ul>",r:{minutes:35.19,words:10556},y:"a",t:"贪心算法",O:7}}],["/LeetCode/%E9%93%BE%E8%A1%A8.html",{loader:()=>n.e(1590).then(n.bind(n,19154)),meta:{d:1711584e6,l:"2024年3月28日",c:["算法"],g:["链表"],e:'\n<h2><a class="header-anchor" href="#_203-移除链表元素"><span></span></a><a href="https://leetcode.cn/problems/remove-linked-list-elements/" target="_blank" rel="noopener noreferrer">203. 移除链表元素</a></h2>\n<p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p>',r:{minutes:14.01,words:4203},y:"a",t:"链表",O:3}}],["/Microservices/SpringCloud%20Alibaba.html",{loader:()=>n.e(3588).then(n.bind(n,87582)),meta:{d:1711584e6,l:"2024年3月28日",c:["微服务"],g:["SpringCloud Alibaba","Nacos","Sentinel","Seata"],u:!0,e:'\n<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>本文档只讲解微服务的基础使用,想要了解深层次的原理请跳过，避免耽误时间！！</p>\n<p>所有代码均在GitHub,需要请自取</p>\n<p><a href="https://github.com/yangzhaoguang/cloud2024.git" target="_blank" rel="noopener noreferrer">https://github.com/yangzhaoguang/cloud2024.git</a></p>\n</div>',r:{minutes:39.34,words:11802},y:"a",t:"SpringCloud Alibaba",O:1}}],["/Microservices/SpringCloud.html",{loader:()=>n.e(9836).then(n.bind(n,1556)),meta:{d:1711584e6,l:"2024年3月28日",c:["微服务"],g:["SpringCloud","Consul","GateWay","ZipKin","OpenFeign","Resilience4J"],u:!0,e:'\n<div class="hint-container tip">\n<p class="hint-container-title">提示</p>\n<p>本文档只讲解微服务的基础使用,想要了解深层次的原理请跳过，避免耽误时间！！</p>\n<p>所有代码均在GitHub,需要请自取</p>\n<p><a href="https://github.com/yangzhaoguang/cloud2024.git" target="_blank" rel="noopener noreferrer">https://github.com/yangzhaoguang/cloud2024.git</a></p>\n</div>',r:{minutes:45.98,words:13794},y:"a",t:"SpringCloud",O:1}}],["/MySQL/01%E6%A6%82%E8%BF%B0.html",{loader:()=>n.e(3325).then(n.bind(n,2962)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>1.1 RDBMS 和 非 RDBMS</h2>\n<p>关系型数据库绝对是 DBMS 的主流，其中使用最多的 DBMS 分别是 Oracle、 MySQL 和 SQL Server。</p>\n<p>这些都是关系型数据库（RDBMS）。</p>\n<h3>1.1.1 关系型数据库(RDBMS)</h3>\n<p>这种类型的数据库是 <code>最古老</code> 的数据库类型，关系型数据库模型是把复杂的数据结构归结为简单的 二元关系 （即二维表格形式）。</p>\n<figure><figcaption>image-20240107131342618.png</figcaption></figure>",r:{minutes:3.94,words:1182},y:"a",t:"一、概述",O:1}}],["/MySQL/02SQL.html",{loader:()=>n.e(632).then(n.bind(n,88766)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<p>SQL（Structured Query Language，结构化查询语言）是使用关系模型的数据库应用语言， 与数据直 接打交道 ，由 IBM 上世纪70年代开发出来。后由美国国家标准局（ANSI）开始着手制定SQL标准， 先后有 <code>SQL-86 ， SQL-89 ， SQL-92 ， SQL-99 </code>等标准。</p>\n<h2>2.1 SQL的分类</h2>\n<ul>\n<li>\n<p><strong>DDL（Data Definition Languages、数据定义语言）</strong></p>\n<ul>\n<li>这些语句定义了不同的数据库、表、视图、索 引等数据库对象，还可以用来<code>创建、删除、修改数据库和数据表的结构</code>。</li>\n<li>主要的语句关键字包括 <code>CREATE 、 DROP 、 ALTER、TRUNCATE </code>等。</li>\n</ul>\n</li>\n<li>\n<p><strong>DML（Data Manipulation Language、数据操作语言）</strong></p>\n<ul>\n<li>用于添加、删除、更新和查询数据库记 录，并检查数据完整性。</li>\n<li>主要的语句关键字包括 <code>INSERT 、 DELETE 、 UPDATE 、 SELECT </code>等。</li>\n<li><code>DML 是SQL中最基础的，也是最为重要的</code></li>\n</ul>\n</li>\n<li>\n<p><strong>DCL（Data Control Language、数据控制语言）</strong></p>\n<ul>\n<li>用于定义数据库、表、字段、用户的访问权限和 安全级别。</li>\n<li>主要的语句关键字包括 <code>GRANT 、 REVOKE 、 COMMIT 、 ROLLBACK 、 SAVEPOINT</code> 等。</li>\n</ul>\n</li>\n</ul>",r:{minutes:12.05,words:3614},y:"a",t:"二、SQL",O:2}}],["/MySQL/03%E5%87%BD%E6%95%B0.html",{loader:()=>n.e(2472).then(n.bind(n,89737)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","函数","MySQL"],u:!0,e:"\n<p><strong>函数的分类</strong></p>\n<figure><figcaption>image-20240120180848000</figcaption></figure>\n<ul>\n<li>操作数据对象</li>\n<li>接受参数返回一个结果</li>\n<li><strong>只对一行进行变换</strong></li>\n<li><strong>每行返回一个结果</strong></li>\n<li>可以嵌套</li>\n<li>参数可以是一列或一个值</li>\n</ul>\n<h2>3.1 单行函数</h2>\n<h3>3.1.1 数值函数</h3>\n<h4>（1）基本函数</h4>",r:{minutes:12.02,words:3605},y:"a",t:"三、函数",O:3}}],["/MySQL/04%E5%AD%90%E6%9F%A5%E8%AF%A2.html",{loader:()=>n.e(1381).then(n.bind(n,64767)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<p>子查询指一个查询语句嵌套在另一个查询语句内部的查询，这个特性从MySQL 4.1开始引入。</p>\n<p>SQL 中子查询的使用大大增强了 SELECT 查询的能力，因为很多时候查询需要从结果集中获取数据，或者 需要从同一个表中先计算得出一个数据结果，然后与这个数据结果（可能是某个标量，也可能是某个集 合）进行比较。</p>\n<blockquote>\n<p>子查询其实就相当于变成语言中的嵌套FOR循环</p>\n</blockquote>\n<h2>4.1 提出需求并解决</h2>\n<figure><figcaption>image-20240121190639539</figcaption></figure>",r:{minutes:6.06,words:1817},y:"a",t:"四、子查询",O:4}}],["/MySQL/05%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8.html",{loader:()=>n.e(7575).then(n.bind(n,4396)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<p>一个完整的数据存储过程总共有 4 步，分别是创建数据库、确认字段、创建数据表、插入数据。</p>\n<figure><figcaption>image-20240225160621281</figcaption></figure>\n<h2>5.1 标识符命名规则</h2>\n<p>数据库名、表名不得超过30个字符，变量名限制为29个</p>\n<p>必须只能包含 A–Z, a–z, 0–9, _共63个字符</p>\n<p>数据库名、表名、字段名等对象名中间不要包含空格</p>\n<p>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</p>\n<p>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使 用`（着重号）引起来</p>",r:{minutes:3.01,words:903},y:"a",t:"五、 创建和管理表",O:5}}],["/MySQL/06MySQL%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{loader:()=>n.e(8775).then(n.bind(n,47814)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<p>常见数据类型的属性，如下：</p>\n<figure><figcaption>image-20240302134320608</figcaption></figure>\n<h2>6.1 整型</h2>\n<p>整数类型一共有 5 种，包括 TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT。</p>\n<p>它们的区别如下表所示</p>\n<figure><figcaption>image-20240302133735988</figcaption></figure>\n<h3>6.1.1 可选属性</h3>\n<h4>(1) M</h4>\n<p><code>M</code> : 表示显示宽度，M的取值范围是(0, 255)。例如，int(5)：当数据宽度小于5位的时候在数字前面需要用 字符填满宽度。该项功能需要配合“ ZEROFILL ”使用，表示用“0”填满宽度，否则指定显示宽度无效。</p>",r:{minutes:12.84,words:3851},y:"a",t:"六、 MYSQL中的数据类型",O:6}}],["/MySQL/07%E7%BA%A6%E6%9D%9F.html",{loader:()=>n.e(6218).then(n.bind(n,91185)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>7.1 约束概念</h2>\n<p><strong>为什么需要约束？</strong></p>\n<p>数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中 存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</p>\n<p>为了保证数据的完整性，SQL规范以约束的方式对表数据进行额外的条件限制。从以下<code>四个方面</code>考虑：</p>\n<ul>\n<li>实体完整性（Entity Integrity） ：例如，同一个表中，不能存在两条完全相同无法区分的记录</li>\n<li>域完整性（Domain Integrity） ：例如：年龄范围0-120，性别范围“男/女</li>\n<li>引用完整性（Referential Integrity） ：例如：员工所在部门，在部门表中要能找到这个部门</li>\n<li>用户自定义完整性（User-defined Integrity） ：例如：用户名唯一、密码不能为空等，本部门 经理的工资不得高于本部门职工的平均工资的5倍</li>\n</ul>",r:{minutes:11.55,words:3464},y:"a",t:"七、 约束",O:7}}],["/MySQL/08MySQL%E6%9E%B6%E6%9E%84.html",{loader:()=>n.e(4330).then(n.bind(n,73017)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>8.1 逻辑架构剖析</h2>\n<p>首先 MySQL 是典型的 C/s 架构，即 client/Server 架构，服务器端程序使用的 mysqld</p>\n<p>不论客户端进程和服务器进程是采用哪种方式进行通信，最后实现的效果都是:<strong>客户端进程向服务器进程发送一段文本(SOL语句)段文本，服务器进程处理后在向客户端进程发送一段文本(处理结果)，</strong></p>\n<figure><figcaption>image-20240303143605705</figcaption></figure>\n<h3>8.1.1 第一层：连接层</h3>\n<p>系统（客户端）访问 MySQL 服务器前，做的第一件事就是建立<code>TCP 连接</code> ， 经过三次握手建立连接成功后， MySQL 服务器对  TCP 传输过来的账号密码做身份认证、权限获取。</p>",r:{minutes:8.16,words:2447},y:"a",t:"八、 MYSQL架构",O:8}}],["/MySQL/09%E7%B4%A2%E5%BC%95.html",{loader:()=>n.e(6730).then(n.bind(n,94671)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>9.1 为什么要使用索引</h2>\n<p>索引是存储引擎用于<code>快速找到数据记录的一种数据结构</code>，就好比一本教课书的目录部分，通过目录中找到对应文章的页码，便可快速定位到需要的文章。MySQL中也是一样的道理，进行数据查找时，首先查看查询条件是否命中某条索引，符合则 <code>通过索引査找</code> 相关数据，如果不符合则需要<code> 全表扫描</code> ，即需要一条一条地查找记录，直到找到与条件符合的记录。</p>\n<blockquote>\n<p>使用索引的目的就是为了减少磁盘IO的次数，加快查询效率</p>\n</blockquote>\n<h2>9.2 索引的特点及优缺点</h2>",r:{minutes:19.15,words:5746},y:"a",t:"九、 索引",O:9}}],["/MySQL/10InnoDB%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.html",{loader:()=>n.e(9170).then(n.bind(n,65320)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>10.1 磁盘与内存交互的基本单位: 页</h2>\n<p>InnoDB 将数据划分为若干个页，InnoDB中页的大小默认为 <code>16KB</code></p>\n<p>以<code> 页</code> 作为磁盘和内存之间交豆的 <code>基本单位</code>，也就是一次最少从磁盘中读取16KB的内容到内存中，一次最少把内存中的16KB内容刷新到磁盘中。也就是说，<strong>在数据库中，不论读一行，还是读多行，都是将这些行所在的页进行加载。也就是说，数据库管理存储空间的基本单位是页(Page)，数据库 I/0 操作的最小单位是页</strong>。一个页中可以存储多个行记录，</p>",r:{minutes:9.68,words:2904},y:"a",t:"十、 InnoDB数据存储结构",O:10}}],["/MySQL/11%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99.html",{loader:()=>n.e(6923).then(n.bind(n,49408)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>11.1 索引的声明与使用</h2>\n<h3>11.1.1 索引的分类</h3>\n<p>MySQL的索引包括普通索引、唯一性索引、全文索引、单列索引、多列索引和空间索引等。</p>\n<p>从<strong>功能逻辑</strong>上说，索引主要有 4 种，分别是普通索引、唯一索引、主键索引、全文索引。</p>\n<p>按照 <strong>物理实现</strong> 方式，索引可以分为 2 种：聚簇索引和非聚簇索引。</p>\n<p>按照 <strong>作用字段个数</strong>进行划分，分成单列索引和联合索引</p>\n<p><strong>（1）普通索引</strong></p>",r:{minutes:7.49,words:2248},y:"a",t:"十一、索引的创建与设计原则",O:11}}],["/MySQL/12%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8.html",{loader:()=>n.e(7390).then(n.bind(n,66671)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>12.1 数据库服务器的优化步骤</h2>\n<p>当我们遇到数据库调优问题的时候，该如何思考呢？这里把思考的流程整理成下面这张图。</p>\n<p>整个流程划分成了 <code>观察（Show status）</code> 和 <code>行动（Action）</code> 两个部分。字母 S 的部分代表观察（会使 用相应的分析工具），字母 A 代表的部分是行动（对应分析可以采取的行动）。</p>\n<figure><figcaption>image-20240309204147339</figcaption></figure>\n<figure><figcaption>image-20240309204157480</figcaption></figure>",r:{minutes:15.66,words:4698},y:"a",t:"十二、性能分析工具的使用",O:12}}],["/MySQL/13%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E4%B8%8E%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96.html",{loader:()=>n.e(8428).then(n.bind(n,49710)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:'\n<h2>13.1 索引失效的11种情况</h2>\n<h3>1、全值匹配</h3>\n<div class="language-sql" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> SQL_NO_CACHE <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">30</span> \n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> SQL_NO_CACHE <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">30</span> <span class="token operator">AND</span> classId <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>\n<span class="token keyword">EXPLAIN</span> <span class="token keyword">SELECT</span> SQL_NO_CACHE <span class="token operator">*</span> <span class="token keyword">FROM</span> student <span class="token keyword">WHERE</span> age<span class="token operator">=</span><span class="token number">30</span> <span class="token operator">AND</span> classId <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">AND</span> name <span class="token operator">=</span> <span class="token string">\'abcd\'</span><span class="token punctuation">;</span>\n\n</code></pre></div>',r:{minutes:12.26,words:3677},y:"a",t:"十三、索引优化与查询优化",O:13}}],["/MySQL/14%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83.html",{loader:()=>n.e(1348).then(n.bind(n,23781)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<p>在关系型数据库中，关于<strong>数据表设计的基本原则、规则就称为范式</strong>。</p>\n<p>目前关系型数据库有六种常见范式，按照范式级别，从低到高分别是：<strong>第一范式（1NF）、第二范式 （2NF）、第三范式（3NF）、巴斯-科德范式（BCNF）、第四范式(4NF）和第五范式（5NF，又称完美 范式）</strong></p>\n<figure><figcaption>image-20240319232051189</figcaption></figure>\n<p><strong>键和相关属性的概念</strong></p>\n<p>范式的定义会使用到主键和候选键，数据库中的键(Key)由一个或者多个属性组成。数据表中常用的几种键和</p>",r:{minutes:4.71,words:1413},y:"a",t:"十四、数据库的设计规范",O:14}}],["/MySQL/15%E4%BA%8B%E5%8A%A1.html",{loader:()=>n.e(5918).then(n.bind(n,87571)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>15.1 事务概述</h2>\n<p>通过 <code>show engines</code> 可以查看支持事务的执行引擎</p>\n<figure><figcaption>image-20240323170524930</figcaption></figure>\n<p><strong>事务</strong>：一组逻辑操作单元，使数据从一种状态变换到另一种状态，要么都执行，要么都不执行</p>\n<p><strong>ACID四个特性</strong></p>\n<p><strong>原子性（atomicity）</strong>： 原子性是指事务是一个不可分割的工作单位，要么全部提交，要么全部失败回滚。</p>",r:{minutes:14.7,words:4411},y:"a",t:"十五、事务",O:15}}],["/MySQL/16%E9%94%81.html",{loader:()=>n.e(9940).then(n.bind(n,82958)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<p>在数据库中，除传统的计算资源（如CPU、RAM、I/O等）的争用以外，数据也是一种供许多用户共享的 资源。为保证数据的一致性，需要对 <code>并发操作进行控制</code>，因此产生了<code>锁</code>。同时 <strong>锁机制也为实现MySQL 的各个隔离级别提供了保证</strong>。 锁冲突也是影响数据库  并发访问性能的一个重要因素。所以锁对数据库而 言显得尤其重要，也更加复杂。</p>\n<h2>16.1 并发事务访问相同的记录</h2>\n<h3>16.1.1 读读的情况</h3>\n<p>读-读 情况，即并发事务相继 读取相同的记录。读取操作本身不会对记录有任何影响，并不会引起什么 问题，所以允许这种情况的发生。</p>",r:{minutes:18.13,words:5439},y:"a",t:"十六、锁",O:16}}],["/MySQL/17MVCC.html",{loader:()=>n.e(8521).then(n.bind(n,48426)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>17.1 什么是MVCC</h2>\n<p>MVCC （Multiversion Concurrency Control），多版本并发控制。顾名思义，MVCC 是通过<code>数据行的多个版本管理</code>来实现数据库的 并发控制 。这项技术使得在InnoDB的事务隔离级别下执行 <code>一致性读</code> 操作有了保证。</p>\n<p>多个版本： 指undo日志中保存的被事务修改的行信息</p>\n<h2>17.2 快照读和当前读</h2>\n<p>MVCC在MySQL InnoDB中的实现主要是为了提高数据库并发性能，用更好的方式去处理 <code>读-写冲突</code> ，做到即使有读写冲突时，也能做到 <code>不加锁</code> ， 非阻塞并发读 ，而这个读指的就是 <code>快照读</code> , 而非 当前读 。<code>当前读实际上是一种加锁</code>的操作，是悲观锁的实现。而MVCC本质是采用乐观锁思想的一种方式。</p>",r:{minutes:9.21,words:2763},y:"a",t:"十七、MVCC",O:17}}],["/MySQL/18%E6%97%A5%E5%BF%97.html",{loader:()=>n.e(3465).then(n.bind(n,58495)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>18.1 日志类型</h2>\n<p>MySQL有不同类型的日志文件，用来存储不同类型的日志，分为<code> 二进制日志、 和慢查 错误日志、 通用查询日志 询日志</code>，这也是常用的4种。MySQL 8又新增两种支持的日志： <code>中继日志和 数据定义语句日志</code>。使 用这些日志文件，可以查看MySQL内部发生的事情。</p>\n<ul>\n<li>**慢查询日志：**记录所有执行时间超过long_query_time的所有查询，方便我们对查询进行优化。</li>\n<li>**通用查询日志：**记录所有连接的起始时间和终止时间，以及连接发送给数据库服务器的所有指令，对我们复原操作的实际场景、发现问题，甚至是对数据库操作的审计都有很大的帮助。</li>\n<li>**错误日志：**记录MySQL服务的启动、运行或停止MySQL服务时出现的问题，方便我们了解服务器的状态，从而对服务器进行维护。</li>\n<li>**二进制日志：**记录所有更改数据的语句，可以用于主从服务器之间的数据同步，以及服务器遇到故障时数据的无损失恢复。</li>\n<li>**中继日志：**用于主从服务器架构中，从服务器用来存放主服务器二进制日志内容的一个中间文件。从服务器通过读取中继日志的内容，来同步主服务器上的操作。</li>\n<li>**数据定义语句日志：**记录数据定义语句执行的元数据操作。</li>\n</ul>",r:{minutes:9.31,words:2792},y:"a",t:"十八、日志",O:18}}],["/MySQL/19%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html",{loader:()=>n.e(6188).then(n.bind(n,7585)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<h2>19.1 主从复制的概述</h2>\n<h3>19.1.1 如何提升数据库的并发能力</h3>\n<p>在实际工作中，我们常常将<code> Redis</code> 作为缓存与 MySQL 配合来使用，当有请求的时候，首先会从缓存中进行查找，如果存在就直接取出。如果不存在再访问数据库，这样就 <code>提升了读取的效率</code>，也减少了对后端数据库的 访问压力。 Redis 的缓存架构是<code>高并发架构</code>中非常重要的一环。</p>\n<figure><figcaption>image-20240401091741919</figcaption></figure>",r:{minutes:8.95,words:2686},y:"a",t:"十九、主从复制",O:19}}],["/MySQL/20%E5%A4%87%E4%BB%BD.html",{loader:()=>n.e(5194).then(n.bind(n,87586)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<p><strong>物理备份</strong>：备份数据文件，转储数据库物理文件到某一目录。物理备份恢复速度比较快，但占用空间比 较大，MySQL中可以用 <code>xtrabackup</code> 工具来进行物理备份。</p>\n<p><strong>逻辑备份</strong>：对数据库对象利用工具进行导出工作，汇总入备份文件内。逻辑备份恢复速度慢，但占用空 间小，更灵活。MySQL 中常用的逻辑备份工具为 <code>mysqldump</code> 。逻辑备份就是 时候执行备份的sql语句实现数据库数据的重现。</p>\n<h2>20.1 逻辑备份</h2>\n<p><strong>备份一个数据库</strong></p>",r:{minutes:3.77,words:1132},y:"a",t:"二十、备份",O:20}}],["/MySQL/21%E9%99%84%E5%BD%95.html",{loader:()=>n.e(5698).then(n.bind(n,19314)),meta:{d:1711584e6,l:"2024年3月28日",c:["数据库"],g:["数据库","MySQL"],u:!0,e:"\n<p>在正式开始讲连接表的种类时，我们首先需要知道 SQL <code>存在不同版本的标准规范</code>，因为不同</p>\n<p>规范下的表 连接操作是有区别的。</p>\n<p>SQL 有两个主要的标准，分别是 <strong>SQL92</strong> 和 <strong>SQL99</strong> 。92 和 99 代表了标准提出的时间，SQL92 就是 92 年 提出的标准规范。当然除了 SQL92 和 SQL99 以外，还存在 SQL-86、SQL-89、SQL:2003、SQL:2008、 SQL:2011 和 SQL:2016 等其他的标准。</p>\n<p>这么多标准，到底该学习哪个呢？<strong>实际上最重要的 SQL 标准就是 SQL92 和 SQL99</strong>。一般来说 SQL92 的 形式更简单，但是写的 SQL 语句会比较长，可读性较差。而 SQL99 相比于 SQL92 来说，语法更加复杂， 但可读性更强。我们从这两个标准发布的页数也能看出，SQL92 的标准有 500 页，而 SQL99 标准超过了 1000 页。实际上从 SQL99 之后，很少有人能掌握所有内容，因为确实太多了。就好比我们使用 Windows、Linux 和 Office 的时候，很少有人能掌握全部内容一样。我们只需要掌握一些核心的功能，满 足日常工作的需求即可。</p>",r:{minutes:2.95,words:884},y:"a",t:"附录",O:21}}],["/MySQL/",{loader:()=>n.e(4470).then(n.bind(n,25279)),meta:{y:"p",t:"MySQL",i:"/assets/icon/mysql.png"}}],["/Redis/%E7%BC%93%E5%AD%98%E5%8F%8C%E5%86%99%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98.html",{loader:()=>n.e(9601).then(n.bind(n,63378)),meta:{d:1713312e6,l:"2024年4月17日",c:["Redis"],g:["缓存","MySQL","数据一致性"],u:!0,e:"\n<p>只要使用缓存，就可能涉及到 Redis 缓存与数据库 双存储双写，只要是双写，就一定会有<strong>数据一致性</strong>的问题！</p>\n<figure><figcaption>image-20240416203555111</figcaption></figure>\n<h3>你是如何解决数据一致性问题的？</h3>\n<ul>\n<li>采用 <strong>双检加锁</strong> 策略</li>\n</ul>\n<p>多个线程同时去查询数据库的这条数据，那么我们可以在第一个查询数据的请求上使用一个 <code>互斥锁</code>来锁住它。其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做<code>缓存</code>。后面的线程进来发现已经有缓存了，就直接走缓存。</p>",r:{minutes:5.53,words:1659},y:"a",t:"缓存双写一致性问题",O:1}}],["/demo/",{loader:()=>n.e(4470).then(n.bind(n,12410)),meta:{y:"p",t:"主要功能与配置演示",i:"laptop-code"}}],["/demo/disable.html",{loader:()=>n.e(3518).then(n.bind(n,37383)),meta:{y:"p",t:"布局与功能禁用",i:"gears",O:4}}],["/demo/encrypt.html",{loader:()=>n.e(8835).then(n.bind(n,54429)),meta:{y:"p",t:"密码加密的文章",i:"lock"}}],["/demo/layout.html",{loader:()=>n.e(4650).then(n.bind(n,16423)),meta:{y:"p",t:"布局",i:"object-group",O:2}}],["/demo/markdown.html",{loader:()=>n.e(5505).then(n.bind(n,44820)),meta:{y:"p",t:"Markdown 展示",i:"fab fa-markdown",O:2}}],["/demo/page.html",{loader:()=>n.e(3335).then(n.bind(n,52242)),meta:{y:"p",t:"页面配置",i:"file",O:3}}],["/404.html",{loader:()=>n.e(7490).then(n.bind(n,54510)),meta:{y:"p",t:""}}],["/LeetCode/",{loader:()=>n.e(4470).then(n.bind(n,90168)),meta:{y:"p",t:"Leet Code"}}],["/Microservices/",{loader:()=>n.e(4470).then(n.bind(n,74694)),meta:{y:"p",t:"Microservices"}}],["/Redis/",{loader:()=>n.e(4470).then(n.bind(n,6510)),meta:{y:"p",t:"Redis"}}],["/category/",{loader:()=>n.e(4470).then(n.bind(n,70905)),meta:{y:"p",t:"分类",I:!1}}],["/category/%E7%AE%97%E6%B3%95/",{loader:()=>n.e(4470).then(n.bind(n,47102)),meta:{y:"p",t:"算法 分类",I:!1}}],["/category/%E5%BE%AE%E6%9C%8D%E5%8A%A1/",{loader:()=>n.e(4470).then(n.bind(n,43947)),meta:{y:"p",t:"微服务 分类",I:!1}}],["/category/%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>n.e(4470).then(n.bind(n,53688)),meta:{y:"p",t:"数据库 分类",I:!1}}],["/category/redis/",{loader:()=>n.e(4470).then(n.bind(n,72352)),meta:{y:"p",t:"Redis 分类",I:!1}}],["/tag/",{loader:()=>n.e(4470).then(n.bind(n,14103)),meta:{y:"p",t:"标签",I:!1}}],["/tag/%E4%BA%8C%E5%8F%89%E6%A0%91/",{loader:()=>n.e(4470).then(n.bind(n,93905)),meta:{y:"p",t:"标签: 二叉树",I:!1}}],["/tag/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86/",{loader:()=>n.e(4470).then(n.bind(n,5467)),meta:{y:"p",t:"标签: 二叉树遍历",I:!1}}],["/tag/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/",{loader:()=>n.e(4470).then(n.bind(n,2549)),meta:{y:"p",t:"标签: 平衡二叉树",I:!1}}],["/tag/%E6%90%9C%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/",{loader:()=>n.e(4470).then(n.bind(n,84953)),meta:{y:"p",t:"标签: 搜索二叉树",I:!1}}],["/tag/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",{loader:()=>n.e(4470).then(n.bind(n,90757)),meta:{y:"p",t:"标签: 动态规划",I:!1}}],["/tag/%E5%93%88%E5%B8%8C%E8%A1%A8/",{loader:()=>n.e(4470).then(n.bind(n,72728)),meta:{y:"p",t:"标签: 哈希表",I:!1}}],["/tag/%E5%9B%9E%E6%BA%AF/",{loader:()=>n.e(4470).then(n.bind(n,10493)),meta:{y:"p",t:"标签: 回溯",I:!1}}],["/tag/%E5%9B%BE%E8%AE%BA/",{loader:()=>n.e(4470).then(n.bind(n,95795)),meta:{y:"p",t:"标签: 图论",I:!1}}],["/tag/%E5%AD%97%E7%AC%A6%E4%B8%B2/",{loader:()=>n.e(4470).then(n.bind(n,10294)),meta:{y:"p",t:"标签: 字符串",I:!1}}],["/tag/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/",{loader:()=>n.e(4470).then(n.bind(n,60338)),meta:{y:"p",t:"标签: 滑动窗口",I:!1}}],["/tag/%E6%95%B0%E7%BB%84/",{loader:()=>n.e(4470).then(n.bind(n,11984)),meta:{y:"p",t:"标签: 数组",I:!1}}],["/tag/%E4%BA%8C%E5%88%86%E6%B3%95/",{loader:()=>n.e(4470).then(n.bind(n,66916)),meta:{y:"p",t:"标签: 二分法",I:!1}}],["/tag/%E6%A0%88/",{loader:()=>n.e(4470).then(n.bind(n,88889)),meta:{y:"p",t:"标签: 栈",I:!1}}],["/tag/%E9%98%9F%E5%88%97/",{loader:()=>n.e(4470).then(n.bind(n,55088)),meta:{y:"p",t:"标签: 队列",I:!1}}],["/tag/%E8%B4%AA%E5%BF%83/",{loader:()=>n.e(4470).then(n.bind(n,24354)),meta:{y:"p",t:"标签: 贪心",I:!1}}],["/tag/%E9%93%BE%E8%A1%A8/",{loader:()=>n.e(4470).then(n.bind(n,30388)),meta:{y:"p",t:"标签: 链表",I:!1}}],["/tag/springcloud-alibaba/",{loader:()=>n.e(4470).then(n.bind(n,10940)),meta:{y:"p",t:"标签: SpringCloud Alibaba",I:!1}}],["/tag/nacos/",{loader:()=>n.e(4470).then(n.bind(n,59858)),meta:{y:"p",t:"标签: Nacos",I:!1}}],["/tag/sentinel/",{loader:()=>n.e(4470).then(n.bind(n,19540)),meta:{y:"p",t:"标签: Sentinel",I:!1}}],["/tag/seata/",{loader:()=>n.e(4470).then(n.bind(n,65904)),meta:{y:"p",t:"标签: Seata",I:!1}}],["/tag/springcloud/",{loader:()=>n.e(4470).then(n.bind(n,44415)),meta:{y:"p",t:"标签: SpringCloud",I:!1}}],["/tag/consul/",{loader:()=>n.e(4470).then(n.bind(n,4654)),meta:{y:"p",t:"标签: Consul",I:!1}}],["/tag/gateway/",{loader:()=>n.e(4470).then(n.bind(n,66027)),meta:{y:"p",t:"标签: GateWay",I:!1}}],["/tag/zipkin/",{loader:()=>n.e(4470).then(n.bind(n,85888)),meta:{y:"p",t:"标签: ZipKin",I:!1}}],["/tag/openfeign/",{loader:()=>n.e(4470).then(n.bind(n,70101)),meta:{y:"p",t:"标签: OpenFeign",I:!1}}],["/tag/resilience4j/",{loader:()=>n.e(4470).then(n.bind(n,45329)),meta:{y:"p",t:"标签: Resilience4J",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>n.e(4470).then(n.bind(n,62688)),meta:{y:"p",t:"标签: 数据库",I:!1}}],["/tag/mysql/",{loader:()=>n.e(4470).then(n.bind(n,4045)),meta:{y:"p",t:"标签: MySQL",I:!1}}],["/tag/%E5%87%BD%E6%95%B0/",{loader:()=>n.e(4470).then(n.bind(n,49703)),meta:{y:"p",t:"标签: 函数",I:!1}}],["/tag/%E7%BC%93%E5%AD%98/",{loader:()=>n.e(4470).then(n.bind(n,50560)),meta:{y:"p",t:"标签: 缓存",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7/",{loader:()=>n.e(4470).then(n.bind(n,66304)),meta:{y:"p",t:"标签: 数据一致性",I:!1}}],["/article/",{loader:()=>n.e(4470).then(n.bind(n,59574)),meta:{y:"p",t:"文章",I:!1}}],["/star/",{loader:()=>n.e(4470).then(n.bind(n,83639)),meta:{y:"p",t:"星标",I:!1}}],["/timeline/",{loader:()=>n.e(4470).then(n.bind(n,13931)),meta:{y:"p",t:"时间轴",I:!1}}]])},58761:(e,t,n)=>{n.d(t,{U:()=>a});const a=JSON.parse('{"base":"/","lang":"zh-CN","title":"鲨瓜","description":"","head":[],"locales":{}}')},26653:(e,t,n)=>{n.d(t,{K:()=>a});const a=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$h7l5E3O9/4ZCpCmxtA0SqOQii8OLAUn4qaMA0EvffkQ4ivkcvkZlC"]}},"author":{"name":"鲨瓜","url":"https://www.yzgc.top"},"logo":"/logo.png","docsDir":"src","footer":"默认页脚","displayFooter":false,"blog":{"description":"代码的搬运工","intro":"/intro.html","medias":{"Email":"mailto:994887644@qq.com","Gitee":"https://gitee.com/yangzhaoguang/projects","GitHub":"https://github.com/yangzhaoguang","Gmail":"mailto:yangzhaoguang09@gmail.com","CSDN":"https://blog.csdn.net/aetawt","SharkMelon":"https://www.yzgc.top"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家","openInNewWindow":"Open in new window"},"navbar":["/","/MySQL/",{"text":"LeetCode","icon":"code","link":"LeetCode/数组.md"},{"text":"缓存中间件","icon":"fa-solid fa-database","children":[{"text":"Redis","link":"Redis/缓存双写一致性问题.md"}]},{"text":"Microservices","icon":"leaf","children":[{"text":"SpringCloud","link":"Microservices/SpringCloud.md"},{"text":"SpringCloud Alibaba","link":"Microservices/SpringCloud Alibaba.md"}]}],"sidebar":{"/LeetCode/":[{"text":"LeetCode","icon":"/assets/icon/leetcode.png","collapsible":true,"children":"structure"}],"/MySQL/":[{"text":"MySQL","icon":"/assets/icon/mysql.png","collapsible":true,"children":"structure"}],"/Redis/":[{"text":"Redis","icon":"fa-solid fa-database","collapsible":true,"children":"structure"}],"/Microservices/":[{"text":"Microservices","icon":"/assets/icon/microservices.png","collapsible":true,"children":"structure"}]}}}}')},38123:(e,t,n)=>{n.d(t,{v:()=>a});const a={"/LeetCode/":["数组","字符串","链表","哈希表","二叉树","栈和队列","回溯","贪心","动态规划","图论"],"/MySQL/":["01概述","02SQL","03函数","04子查询","05创建和管理表","06MySQL中的数据类型","07约束","08MySQL架构","09索引","10InnoDB数据存储结构","11索引的创建与设计原则","12性能分析工具的使用","13索引优化与查询优化","14数据库的设计规范","15事务","16锁","17MVCC","18日志","19主从复制","20备份","21附录"],"/Redis/":["缓存双写一致性问题"],"/Microservices/":["SpringCloud","SpringCloud Alibaba"]}},32878:(e,t,n)=>{n.d(t,{P:()=>a});const a={Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Gmail:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gmail-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DB4437"/><path fill="#E67C73" d="M277.48 285.567h465.767v441.362H277.48V285.567z"/><path fill="#FFF" d="M282.543 285.567h-10.645c-25.962 0-47.122 21.808-47.122 48.705v343.952c0 26.897 21.08 48.705 47.122 48.705h24.976V407.954l213.49 169.95 213.489-169.95V726.93h24.975c26.04 0 47.123-21.809 47.123-48.705V334.272c0-26.897-21.134-48.705-47.123-48.705h-10.644L510.364 480.44 282.542 285.567z"/></svg>',CSDN:'<svg t="1711607188966" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3074" width="128" height="128"><path d="M512 1024C229.222 1024 0 794.778 0 512S229.222 0 512 0s512 229.222 512 512-229.222 512-512 512z m17.067-413.525c34.85 4.352 68.778 5.12 102.741 2.099 23.04-2.048 44.817-8.363 64.17-21.914 38.213-26.794 49.784-85.197 24.252-123.05-14.626-21.71-36.812-30.345-60.757-35.5-35.055-7.543-70.451-5.75-105.847-3.412-5.667 0.358-6.759 3.072-7.237 8.209-3.072 32.682-6.536 65.314-9.813 97.962-2.509 24.815-4.932 49.63-7.51 75.606z m53.401-33.929c1.963-20.907 3.635-39.339 5.427-57.77 1.554-15.907 3.414-31.779 4.728-47.702 0.358-4.284 1.553-6.656 5.956-6.383 15.616 1.041 31.71 0.034 46.729 3.652 36.488 8.824 48.725 54.307 23.347 83.03-15.82 17.903-36.762 23.586-59.256 25.088-8.465 0.546-17.015 0.085-26.93 0.085zM512 434.296c-2.185-0.65-3.533-1.178-4.932-1.434-37.718-6.878-75.69-8.329-113.647-2.816-20.975 3.038-41.011 9.489-57.48 23.33-22.99 19.32-21.641 46.848 4.402 62.003 13.056 7.595 28.024 12.51 42.599 17.289 14.08 4.608 28.996 6.826 43.144 11.264 12.596 3.925 14.012 14.319 3.584 22.306-3.345 2.56-7.44 5.086-11.537 5.751-11.195 1.826-22.698 4.386-33.826 3.567-24.098-1.775-48.042-5.461-72.55-8.43-1.366 10.615-2.936 23.09-4.557 35.942 4.181 1.365 7.68 2.73 11.264 3.618 33.946 8.5 68.386 9.608 102.912 5.12 20.087-2.611 39.475-7.902 56.695-19.03 28.604-18.483 36.694-57.19-4.676-75.383-14.506-6.383-30.19-10.41-45.482-15.087-11.418-3.481-23.314-5.615-34.526-9.523-9.78-3.413-11.145-12.203-3.038-18.398 4.659-3.55 10.718-6.997 16.384-7.373a480.853 480.853 0 0 1 53.384-0.853c15.377 0.7 30.652 3.55 46.49 5.53L512 434.295z m257.143 2.047l-18.21 177.955h54.153c4.779-45.637 9.71-90.727 14.063-135.885 0.614-6.366 2.355-8.84 8.687-9.011 11.434-0.273 22.886-1.98 34.287-1.57 23.722 0.853 42.393 9.727 38.4 43.263-2.902 24.27-5.598 48.572-8.244 72.875-1.092 10.07-1.826 20.19-2.73 30.413h55.33c3.584-35.26 7.987-70.059 10.496-104.994 3.413-47.463-17.766-73.319-64.683-80.214-40.96-6.007-81.34-0.34-121.549 7.134zM285.645 570.948c-8.738 1.297-16.384 2.8-24.098 3.482-25.652 2.236-51.32 3.942-76.305-4.267-13.91-4.59-24.679-12.578-29.799-25.958-7.902-20.702 0.888-47.104 19.832-60.314 17.374-12.117 37.717-15.923 58.453-15.923 22.545-0.017 45.09 2.423 68.233 3.84l5.239-39.51c-15.07-1.723-29.491-3.925-43.998-4.915-41.011-2.798-80.64 2.612-117.47 20.463-30.02 14.558-52.053 36.011-58.675 68.13-7.85 38.145 11.537 69.496 51.763 85.846 19.15 7.765 39.288 12.51 60.007 12.595 24.746 0.102 49.493-1.57 74.206-2.952 3.106-0.171 8.311-2.902 8.67-5.035 1.98-11.554 2.73-23.28 3.942-35.465z" fill="#DD1700" p-id="3075"></path></svg><path d="M0 0h1024v1024H0z" fill="#FF6633" p-id="2867"></path><path d="M698.9824 42.3936c-158.8736-32.5632-289.536 31.2832-324.9152 48.5888-94.72 46.2848-147.712 108.288-174.4896 140.288-25.9584 31.0272-82.7392 105.9328-108.288 215.8592-21.6576 93.1328-10.752 167.7824-6.0416 194.2528 11.4688 64.3072 33.28 186.88 150.4256 275.2 132.5056 99.8912 293.4784 85.5552 342.9888 80.9472 107.264-10.0352 289.4848-57.2928 300.8512-145.7152 5.1712-39.936-24.4224-89.4464-66.2016-102.5024-65.6384-20.5312-108.3392 63.5392-228.6592 80.9472-8.5504 1.2288-126.5664 16.6912-216.6272-48.5888-105.8816-76.6976-98.9696-211.3024-96.256-264.3968 1.536-30.5664 5.5808-93.5424 48.128-161.8944 14.7968-23.7568 60.3136-94.5664 156.4672-134.912 25.2928-10.5984 76.8512-31.5904 144.4352-26.9824 70.0416 4.7616 120.9856 34.5088 144.4352 48.5888 75.8272 45.4144 86.528 90.0608 120.3712 86.3232 35.8912-3.9424 69.9904-59.2896 66.2016-107.9296-7.424-93.7984-155.5968-158.1056-252.8256-178.0736z" fill="#FFFFFF" p-id="2868"></path></svg>',SharkMelon:'<svg t="1711700481374" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="6545" width="128" height="128"><path d="M0 0h1.28C0.96 0.32 0.32 1.066667 0 1.493333V0z" fill="#FFD074" p-id="6546"></path><path d="M313.173333 100.48c122.026667-60.053333 271.786667-62.186667 394.133334-2.133333-4.16 4.693333-12.48 14.08-16.64 18.666666-111.146667-53.44-249.706667-52.906667-360.32 1.6-4.373333-4.586667-12.906667-13.653333-17.173334-18.133333z" fill="#EDA950" p-id="6547"></path><path d="M198.72 132.906667c-1.173333-57.28 82.88-77.013333 114.453333-32.426667 4.266667 4.48 12.8 13.546667 17.173334 18.133333-0.96 20.8-3.626667 41.6-10.773334 61.226667-16.533333-12.053333-20.373333-32.533333-25.706666-50.88-0.96-3.84-2.666667-11.413333-3.52-15.253333-34.026667-28.053333-61.973333 7.573333-91.626667 19.2z" fill="#AF4A1C" p-id="6548"></path><path d="M330.346667 118.613333c110.613333-54.506667 249.173333-55.04 360.32-1.6 1.28 18.346667 2.666667 36.586667 3.413333 54.933334-4.693333 2.026667-13.973333 6.186667-18.56 8.213333-9.386667 28.48 22.293333 40.533333 40.32 54.293333-62.293333 6.72-169.386667 65.28-112.96 137.706667-53.973333-1.386667-107.946667-0.96-161.92 0.64 2.453333-27.626667 1.493333-58.346667-21.44-77.653333-67.306667-61.76-165.76-66.88-251.84-55.253334 28.693333-50.666667 78.506667-80.853333 126.186667-110.933333 5.333333 18.346667 9.173333 38.826667 25.706666 50.88 7.146667-19.626667 9.813333-40.426667 10.773334-61.226667z" fill="#FDE877" p-id="6549"></path><path d="M707.306667 98.346667c33.6-45.973333 112.746667-22.72 117.44 33.6-29.653333 3.413333-55.893333-58.666667-89.173334-19.413334l-11.946666 14.933334c-4.266667 12.266667-7.893333 24.64-12.266667 36.906666-4.373333 1.92-13.013333 5.653333-17.28 7.573334-0.746667-18.346667-2.133333-36.586667-3.413333-54.933334 4.16-4.586667 12.48-13.973333 16.64-18.666666z" fill="#AF4A1C" p-id="6550"></path><path d="M143.04 245.12c35.946667-56 88.426667-100.8 147.306667-131.413333 0.853333 3.84 2.56 11.413333 3.52 15.253333-47.68 30.08-97.493333 60.266667-126.186667 110.933333-6.186667 1.28-18.453333 3.946667-24.64 5.226667zM723.626667 127.466667l11.946666-14.933334c65.066667 36.906667 126.506667 87.893333 161.28 155.093334-6.72-4.266667-20.266667-12.8-26.986666-17.066667l-3.84-2.986667c-37.12-50.24-95.36-79.893333-142.4-120.106666z" fill="#EDA950" p-id="6551"></path><path d="M711.36 164.373333c4.373333-12.266667 8-24.64 12.266667-36.906666 47.04 40.213333 105.28 69.866667 142.4 120.106666-49.706667-7.253333-99.626667-16.533333-150.186667-13.12-18.026667-13.76-49.706667-25.813333-40.32-54.293333 4.586667-2.026667 13.866667-6.186667 18.56-8.213333 4.266667-1.92 12.906667-5.653333 17.28-7.573334z" fill="#FFD074" p-id="6552"></path><path d="M142.72 245.333333c0.106667-0.106667 0.213333-0.106667 0.32-0.213333-0.106667 0.106667-0.213333 0.106667-0.32 0.213333z" fill="#EDA950" p-id="6553"></path><path d="M143.04 245.12c6.186667-1.28 18.453333-3.946667 24.64-5.226667 86.08-11.626667 184.533333-6.506667 251.84 55.253334 22.933333 19.306667 23.893333 50.026667 21.44 77.653333 53.973333-1.6 107.946667-2.026667 161.92-0.64-56.426667-72.426667 50.666667-130.986667 112.96-137.706667 50.56-3.413333 100.48 5.866667 150.186667 13.12l3.84 2.986667c6.72 4.266667 20.266667 12.8 26.986666 17.066667 0.533333 0.32 1.493333 0.96 2.026667 1.28 65.92 29.12 58.346667 105.706667 66.133333 165.226666-5.76 0.746667-17.173333 2.346667-22.933333 3.093334l-11.093333 1.706666c-1.92 7.36-5.546667 21.866667-7.36 29.226667l-28.48 8c-1.6 6.613333-5.013333 19.946667-6.613334 26.56-7.253333 1.386667-21.866667 4.053333-29.12 5.44-1.493333 7.04-4.373333 21.226667-5.76 28.373333-82.133333 4.373333-164.48 0.106667-246.613333 3.626667 6.4-27.84-10.773333-35.733333-34.56-35.946667-1.173333-7.04-3.626667-21.12-4.8-28.16-46.826667 7.786667-33.813333-41.386667-35.306667-70.613333-23.36 0-46.613333 0.426667-69.866666 1.28 0 21.653333 0.106667 43.2 0.106666 64.853333-8.32 0.746667-25.066667 2.133333-33.493333 2.88-1.6 10.24-3.2 20.586667-4.8 30.933334-7.68 1.066667-23.146667 3.306667-30.826667 4.373333-1.173333 7.893333-3.306667 23.573333-4.373333 31.466667-69.333333 0.96-138.666667 0.426667-208.106667 2.026666-2.453333-10.56-4.8-21.226667-7.253333-31.786666-7.146667-0.96-21.44-2.773333-28.586667-3.626667-3.733333-10.133333-7.573333-20.16-11.413333-30.293333-6.933333-1.066667-20.8-3.306667-27.733333-4.373334-0.64-7.786667-2.026667-23.146667-2.773334-30.826666-7.893333 0.106667-23.786667 0.426667-31.68 0.533333 0.106667-18.986667 0.32-37.866667 0.533334-56.853333l0.746666-8.853334c18.453333 11.2 30.506667-21.013333 6.933334-20.053333-34.346667-50.133333 32.32-83.2 62.933333-111.786667 0.106667-0.106667 0.213333-0.106667 0.32-0.213333m486.826667 39.253333c31.146667 0.746667 59.413333 31.04 46.293333 62.4 57.173333-8.96 116.16-7.573333 173.546667-1.28 29.013333 16.746667 59.2 31.04 93.76 22.506667 12.053333-34.986667-11.306667-71.253333-43.413334-84.906667-81.28-43.84-193.386667-58.88-270.186666 1.28m-522.56-1.813333c33.706667-0.213333 67.626667 29.226667 53.44 64.426667 45.44-8.96 91.946667-4.693333 137.92-5.12 47.146667-7.573333 78.933333 43.946667 126.826666 29.12 14.506667-31.36-4.586667-66.24-32.533333-81.92-84.16-53.44-199.893333-59.2-285.653333-6.506667m41.706666 84.8c64.96 14.933333 136-0.213333 203.2 6.08-54.826667-39.573333-141.333333-29.12-203.2-6.08m513.813334-0.32c67.093333 9.173333 135.253333 0.106667 202.773333 3.2-59.413333-33.813333-140.16-26.026667-202.773333-3.2m-344.746667 41.066667l5.12 34.133333-38.826667-2.133333c1.066667 7.68 3.306667 23.04 4.373334 30.72l28.586666 0.426666c-14.4 45.013333 50.346667 49.28 39.573334 2.666667 22.613333 5.973333 42.133333-8.853333 34.453333-32.96-10.24 0.106667-30.826667 0.32-41.173333 0.533333 1.493333-8.533333 4.266667-25.386667 5.76-33.813333l-37.866667 0.426667m72-3.413334l1.28 36.266667c45.653333 12.053333 42.88-50.88-1.28-36.266667m391.786667-1.28l2.56 39.68-38.506667-4.693333c0.96 8.746667 2.666667 26.346667 3.52 35.093333l33.813333-7.68c0 9.493333 0.106667 28.48 0.106667 38.08 19.84 9.28 56.533333-13.226667 26.346667-29.653333 20.48 1.173333 61.013333-2.56 40.96-32.533333-10.666667-1.92-32-5.866667-42.666667-7.786667 31.04-14.4-4.266667-41.386667-26.133333-30.506667m70.72 0.213334c-0.533333 9.493333-1.386667 28.586667-1.92 38.08 48.213333 9.386667 52.8-53.653333 1.92-38.08m-598.293334 99.52c23.146667 21.12 35.093333-13.333333 34.453334-32.32-19.52-2.88-57.6 8-34.453334 32.32m457.706667-30.72c0.32 8 0.853333 24 1.173333 32 8.64 0 26.026667-0.106667 34.666667-0.106667 0.426667-7.68 1.173333-23.146667 1.6-30.826667-9.386667-0.213333-28.053333-0.746667-37.44-1.066666z" fill="#1F1F1F" p-id="6554"></path><path d="M629.866667 284.373333c76.8-60.16 188.906667-45.12 270.186666-1.28 32.106667 13.653333 55.466667 49.92 43.413334 84.906667-34.56 8.533333-64.746667-5.76-93.76-22.506667-57.386667-6.293333-116.373333-7.68-173.546667 1.28 13.12-31.36-15.146667-61.653333-46.293333-62.4z" fill="#FFFFFF" p-id="6555"></path><path d="M866.026667 247.573333l3.84 2.986667-3.84-2.986667z" fill="#FFD074" p-id="6556"></path><path d="M107.306667 282.56c85.76-52.693333 201.493333-46.933333 285.653333 6.506667 27.946667 15.68 47.04 50.56 32.533333 81.92-47.893333 14.826667-79.68-36.693333-126.826666-29.12-45.973333 0.426667-92.48-3.84-137.92 5.12 14.186667-35.2-19.733333-64.64-53.44-64.426667z" fill="#FFFFFF" p-id="6557"></path><path d="M896.853333 267.626667c0.533333 0.32 1.493333 0.96 2.026667 1.28-0.533333-0.32-1.493333-0.96-2.026667-1.28zM79.786667 357.12c23.573333-0.96 11.52 31.253333-6.933334 20.053333 1.813333-5.013333 5.226667-15.04 6.933334-20.053333z" fill="#EDA950" p-id="6558"></path><path d="M149.013333 367.36c61.866667-23.04 148.373333-33.493333 203.2 6.08-67.2-6.293333-138.24 8.853333-203.2-6.08zM662.826667 367.04c62.613333-22.826667 143.36-30.613333 202.773333 3.2-67.52-3.093333-135.68 5.973333-202.773333-3.2z" fill="#FDE877" p-id="6559"></path><path d="M239.68 881.173333C88 772.053333 18.24 564.16 72.106667 386.026667c-0.213333 18.986667-0.426667 37.866667-0.533334 56.853333-2.133333 97.28 9.706667 201.28 64.426667 284.053333 65.706667 99.413333 163.84 182.72 282.88 206.72 111.146667 30.4 231.893333 1.173333 327.573333-59.52 143.146667-91.413333 220.8-269.653333 195.626667-436.906666 5.76-0.746667 17.173333-2.346667 22.933333-3.093334 29.973333 170.24-43.093333 353.28-185.6 452.16-156.053333 114.56-386.026667 112.64-539.733333-5.12z" fill="#EDA950" p-id="6560"></path><path d="M318.08 408.106667l37.866667-0.426667c-1.493333 8.426667-4.266667 25.28-5.76 33.813333-6.72 0.213333-20.266667 0.533333-26.986667 0.746667l-5.12-34.133333zM390.08 404.693333c44.16-14.613333 46.933333 48.32 1.28 36.266667l-1.28-36.266667z" fill="#999A9D" p-id="6561"></path><path d="M462.506667 406.72c23.253333-0.853333 46.506667-1.28 69.866666-1.28 1.493333 29.226667-11.52 78.4 35.306667 70.613333 1.173333 7.04 3.626667 21.12 4.8 28.16 23.786667 0.213333 40.96 8.106667 34.56 35.946667 29.973333 2.986667 60.16 4.8 90.346667 6.293333-54.08 88.853333-139.946667 161.28-241.6 188.373334-33.92 9.493333-72.96 11.733333-97.066667 41.066666-86.613333-37.12-154.986667-117.226667-167.466667-212.053333-18.986667 87.573333 46.293333 167.893333 112.426667 217.386667-6.826667 2.773333-20.48 8.426667-27.306667 11.2-43.84-27.52-90.026667-51.84-140.373333-65.493334-54.72-82.773333-66.56-186.773333-64.426667-284.053333 7.893333-0.106667 23.786667-0.426667 31.68-0.533333 0.746667 7.68 2.133333 23.04 2.773334 30.826666 6.933333 1.066667 20.8 3.306667 27.733333 4.373334 3.84 10.133333 7.68 20.16 11.413333 30.293333 7.146667 0.853333 21.44 2.666667 28.586667 3.626667 2.453333 10.56 4.8 21.226667 7.253333 31.786666 69.44-1.6 138.773333-1.066667 208.106667-2.026666 1.066667-7.893333 3.2-23.573333 4.373333-31.466667 7.68-1.066667 23.146667-3.306667 30.826667-4.373333 1.6-10.346667 3.2-20.693333 4.8-30.933334 8.426667-0.746667 25.173333-2.133333 33.493333-2.88 0-21.653333-0.106667-43.2-0.106666-64.853333z" fill="#FDE877" p-id="6562"></path><path d="M781.866667 403.413333c21.866667-10.88 57.173333 16.106667 26.133333 30.506667-5.866667 2.346667-17.706667 6.933333-23.573333 9.173333l-2.56-39.68zM852.586667 403.626667c50.88-15.573333 46.293333 47.466667-1.92 38.08 0.533333-9.493333 1.386667-28.586667 1.92-38.08zM284.373333 440.106667l38.826667 2.133333c-1.493333 7.253333-4.373333 21.76-5.866667 29.013333l-28.586666-0.426666c-1.066667-7.68-3.306667-23.04-4.373334-30.72z" fill="#999A9D" p-id="6563"></path><path d="M323.2 442.24c6.72-0.213333 20.266667-0.533333 26.986667-0.746667 1.706667 8.106667 5.12 24.32 6.72 32.426667-9.92-0.64-29.653333-2.026667-39.573334-2.666667 1.493333-7.253333 4.373333-21.76 5.866667-29.013333z" fill="#1F1F1F" p-id="6564"></path><path d="M350.186667 441.493333c10.346667-0.213333 30.933333-0.426667 41.173333-0.533333 7.68 24.106667-11.84 38.933333-34.453333 32.96-1.6-8.106667-5.013333-24.32-6.72-32.426667zM745.92 438.4l38.506667 4.693333c-0.32 5.653333-0.853333 17.066667-1.173334 22.72l-33.813333 7.68c-0.853333-8.746667-2.56-26.346667-3.52-35.093333z" fill="#999A9D" p-id="6565"></path><path d="M784.426667 443.093333c5.866667-2.24 17.706667-6.826667 23.573333-9.173333l1.706667 40.32c-6.613333-2.133333-19.84-6.293333-26.453334-8.426667 0.32-5.653333 0.853333-17.066667 1.173334-22.72z" fill="#1F1F1F" p-id="6566"></path><path d="M808 433.92c10.666667 1.92 32 5.866667 42.666667 7.786667 20.053333 29.973333-20.48 33.706667-40.96 32.533333l-1.706667-40.32z" fill="#999A9D" p-id="6567"></path><path d="M930.986667 438.933333l11.093333-1.706666c25.173333 167.253333-52.48 345.493333-195.626667 436.906666-95.68 60.693333-216.426667 89.92-327.573333 59.52-119.04-24-217.173333-107.306667-282.88-206.72 50.346667 13.653333 96.533333 37.973333 140.373333 65.493334 6.826667-2.773333 20.48-8.426667 27.306667-11.2 135.146667 85.866667 327.04 77.653333 447.466667-30.613334 47.36-48 84.693333-113.28 79.466666-182.826666-39.786667 204.373333-295.146667 294.293333-471.893333 208.106666 24.106667-29.333333 63.146667-31.573333 97.066667-41.066666 101.653333-27.093333 187.52-99.52 241.6-188.373334-30.186667-1.493333-60.373333-3.306667-90.346667-6.293333 82.133333-3.52 164.48 0.746667 246.613333-3.626667 1.386667-7.146667 4.266667-21.333333 5.76-28.373333 7.253333-1.386667 21.866667-4.053333 29.12-5.44 1.6-6.613333 5.013333-19.946667 6.613334-26.56l28.48-8c1.813333-7.36 5.44-21.866667 7.36-29.226667z" fill="#FFD074" p-id="6568"></path><path d="M254.293333 503.146667c-23.146667-24.32 14.933333-35.2 34.453334-32.32 0.64 18.986667-11.306667 53.44-34.453334 32.32zM317.333333 471.253333c9.92 0.64 29.653333 2.026667 39.573334 2.666667 10.773333 46.613333-53.973333 42.346667-39.573334-2.666667zM712 472.426667c9.386667 0.32 28.053333 0.853333 37.44 1.066666-0.426667 7.68-1.173333 23.146667-1.6 30.826667-8.64 0-26.026667 0.106667-34.666667 0.106667-0.32-8-0.853333-24-1.173333-32zM783.253333 465.813333c6.613333 2.133333 19.84 6.293333 26.453334 8.426667 30.186667 16.426667-6.506667 38.933333-26.346667 29.653333 0-9.6-0.106667-28.586667-0.106667-38.08z" fill="#999A9D" p-id="6569"></path><path d="M303.68 781.226667c-66.133333-49.493333-131.413333-129.813333-112.426667-217.386667 12.48 94.826667 80.853333 174.933333 167.466667 212.053333 176.746667 86.186667 432.106667-3.733333 471.893333-208.106666 5.226667 69.546667-32.106667 134.826667-79.466666 182.826666-120.426667 108.266667-312.32 116.48-447.466667 30.613334z" fill="#690201" p-id="6570"></path></svg><path d="M512 719c228.6 0 414-185.4 414-414H98c0 228.6 185.4 414 414 414z" fill="#9AD19A" p-id="4516"></path><path d="M512 675.5c204.6 0 370.5-165.9 370.5-370.5h-741c0 204.6 165.9 370.5 370.5 370.5z" fill="#F7645C" p-id="4517"></path><path d="M891.5 296H89v9c0 233.2 189.8 423 423 423s423-189.8 423-423v-9h-43.5z m-18.1 18C868.6 509.2 708.3 666.5 512 666.5S155.4 509.2 150.6 314h722.8zM512 710c-220.3 0-400.1-176.8-404.9-396h25.6c4.8 205.1 173 370.5 379.3 370.5S886.5 519.1 891.3 314h25.6C912.1 533.2 732.3 710 512 710z" fill="#384D68" p-id="4518"></path><path d="M244.61 391.318l17.536-17.536 12.727 12.728-17.536 17.536z m350.438-7.078l17.536-17.535 12.728 12.727-17.537 17.536z m97.573 147.658l17.536-17.536 12.728 12.728-17.536 17.536z m-241.576-26.276l17.536-17.536 12.728 12.727-17.536 17.537zM375.91 386.5l12.723-12.731 17.541 17.53-12.724 12.732z m-54.153 110.119l12.728-12.728 17.536 17.536-12.728 12.728zM469.65 611.505l12.728-12.728 17.536 17.536-12.728 12.728z m120.58-135.087l12.728-12.728 17.536 17.536-12.728 12.728z m203.146-105.756l12.728-12.728 17.536 17.537-12.728 12.727z m-189.55 212.054l12.727-12.728 17.536 17.536-12.727 12.728z" fill="#384D68" p-id="4519"></path></svg><path d="M512 719c228.6 0 414-185.4 414-414H98c0 228.6 185.4 414 414 414z" fill="#9AD19A" p-id="4516"></path><path d="M512 675.5c204.6 0 370.5-165.9 370.5-370.5h-741c0 204.6 165.9 370.5 370.5 370.5z" fill="#F7645C" p-id="4517"></path><path d="M891.5 296H89v9c0 233.2 189.8 423 423 423s423-189.8 423-423v-9h-43.5z m-18.1 18C868.6 509.2 708.3 666.5 512 666.5S155.4 509.2 150.6 314h722.8zM512 710c-220.3 0-400.1-176.8-404.9-396h25.6c4.8 205.1 173 370.5 379.3 370.5S886.5 519.1 891.3 314h25.6C912.1 533.2 732.3 710 512 710z" fill="#384D68" p-id="4518"></path><path d="M244.61 391.318l17.536-17.536 12.727 12.728-17.536 17.536z m350.438-7.078l17.536-17.535 12.728 12.727-17.537 17.536z m97.573 147.658l17.536-17.536 12.728 12.728-17.536 17.536z m-241.576-26.276l17.536-17.536 12.728 12.727-17.536 17.537zM375.91 386.5l12.723-12.731 17.541 17.53-12.724 12.732z m-54.153 110.119l12.728-12.728 17.536 17.536-12.728 12.728zM469.65 611.505l12.728-12.728 17.536 17.536-12.728 12.728z m120.58-135.087l12.728-12.728 17.536 17.536-12.728 12.728z m203.146-105.756l12.728-12.728 17.536 17.537-12.728 12.727z m-189.55 212.054l12.727-12.728 17.536 17.536-12.727 12.728z" fill="#384D68" p-id="4519"></path></svg><path d="M211.797415 28.999646c-2.799966 2.699967-5.899928 5.099938-8.699894 7.899904-216.497357 216.497357-216.497357 567.493073 0 783.990429s567.493073 216.497357 783.99043 0c2.799966-2.799966 5.099938-5.899928 7.899903-8.699893L211.797415 28.999646z" fill="#E6EE9C" p-id="1847"></path><path d="M299.496344 116.698575c-2.199973 2.099974-4.599944 3.899952-6.799917 6.099926-167.997949 167.997949-167.997949 440.494623 0 608.492572s440.494623 167.997949 608.492572 0c2.199973-2.199973 3.999951-4.499945 6.099926-6.799917L299.496344 116.698575z" fill="#FF5252" p-id="1848"></path><path d="M965.888209 783.090441c-2.699967 2.799966-5.099938 5.899928-7.899903 8.699894-200.097557 200.097557-525.793582 200.097557-725.891139 0S31.999609 265.996753 232.097167 65.899196c2.799966-2.799966 5.899928-5.099938 8.699894-7.899904l-57.999292-57.999292c-2.799966 2.699967-5.899928 5.099938-8.699894 7.899904C-57.999292 239.99707-57.999292 617.69246 174.097875 849.889625s609.892555 232.097167 841.989722 0c2.799966-2.799966 5.099938-5.899928 7.899903-8.699893l-58.099291-58.099291z" fill="#4CAF50" p-id="1849"></path><path d="M307.596245 310.696207c-0.999988 0.999988-1.899977 1.999976-2.699967 2.999964-18.599773 22.199729-7.199912 56.49931 20.299752 65.699198l20.099755 6.699918L401.995093 404.995056l-18.899769-56.699308-6.699919-20.099754c-9.199888-27.499664-43.39947-38.799526-65.699198-20.299752-1.199985 0.899989-2.199973 1.799978-3.099962 2.799965zM278.696598 474.694205c0 1.399983 0.099999 2.699967 0.199998 3.999952 2.599968 28.899647 34.899574 45.099449 60.799257 32.099608l18.89977-9.499884 53.399348-26.699674-53.399348-26.599676-18.89977-9.499884c-25.899684-12.999841-58.19929 3.29996-60.799257 32.099608-0.199998 1.399983-0.199998 2.799966-0.199998 4.09995zM385.595293 638.692203c0.999988 0.999988 1.999976 1.899977 2.999963 2.699968 22.199729 18.599773 56.49931 7.199912 65.699198-20.299753L460.994373 600.992664l18.899769-56.699308-56.699308 18.899769-20.099755 6.699918c-27.499664 9.199888-38.799526 43.39947-20.299752 65.699198 0.999988 1.099987 1.899977 2.099974 2.799966 3.099962zM549.69329 745.290902c1.399983 0 2.699967-0.099999 3.999951-0.199997 28.899647-2.599968 45.099449-34.899574 32.099608-60.799258l-9.499884-18.899769-26.599675-53.399349-26.699674 53.399349-9.499884 18.899769c-12.999841 25.899684 3.29996 58.19929 32.099608 60.799258 1.399983 0.199998 2.699967 0.199998 4.09995 0.199997zM713.591289 716.091259c0.999988-0.999988 1.899977-1.999976 2.699967-2.999964 18.599773-22.199729 7.199912-56.49931-20.299752-65.699198l-20.099755-6.699918-56.699308-18.899769 18.89977 56.699308 6.699918 20.099754c9.199888 27.499664 43.39947 38.799526 65.699198 20.299752 1.199985-0.899989 2.199973-1.799978 3.099962-2.799965z" fill="#5D4037" p-id="1850"></path></svg>'}}},e=>{e.O(0,[5471,6549],(()=>(38731,e(e.s=38731)))),e.O()}]);