"use strict";(self.webpackChunkvuepress_theme_hope_template=self.webpackChunkvuepress_theme_hope_template||[]).push([[959],{66262:(n,s)=>{s.A=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},32707:(n,s,a)=>{a.r(s),a.d(s,{comp:()=>sn,data:()=>an});var t=a(20641);const e=a.p+"assets/img/image-20230927214123859.e5669518.png",p=a.p+"assets/img/1600795186-GezFXt-Picture14.7f5bcde0.png",o=a.p+"assets/img/1600795186-CeiDKq-Picture19.f42dcfee.png",c=a.p+"assets/img/84f9f1fce23655fcc653179b26d9800edf54858f790be1bc7573eb228f2aac00-2.a0905edd.gif",l=a.p+"assets/img/image-20231017222624936.058ecded.png",i=a.p+"assets/img/image-20230925231243004.75e479d2.png",u=(0,t.Lk)("h1",{id:"字符串",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#字符串"},[(0,t.Lk)("span",null,"字符串")])],-1),r=(0,t.Lk)("h2",{id:"双指针系列",tabindex:"-1"},[(0,t.Lk)("a",{class:"header-anchor",href:"#双指针系列"},[(0,t.Lk)("span",null,"双指针系列")])],-1),d={id:"_14-最长公共前缀",tabindex:"-1"},k={class:"header-anchor",href:"#_14-最长公共前缀"},v={href:"https://leetcode.cn/problems/longest-common-prefix/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://leetcode.cn/problems/longest-common-prefix/solutions/2459021/problem-14-zui-chang-gong-gong-qian-zhui-tlgr/",target:"_blank",rel:"noopener noreferrer"},g={id:"_167-两数之和-ii-输入有序数组",tabindex:"-1"},b={class:"header-anchor",href:"#_167-两数之和-ii-输入有序数组"},h={href:"https://leetcode.cn/problems/two-sum-ii-input-array-is-sorted/",target:"_blank",rel:"noopener noreferrer"},f=(0,t.Fv)('<p>给你一个下标从 <strong>1</strong> 开始的整数数组 <code>numbers</code> ，该数组已按 <strong>非递减顺序排列</strong> ，请你从数组中找出满足相加之和等于目标数 <code>target</code> 的两个数。如果设这两个数分别是 <code>numbers[index1]</code> 和 <code>numbers[index2]</code> ，则 <code>1 &lt;= index1 &lt; index2 &lt;= numbers.length</code> 。</p><p>以长度为 2 的整数数组 <code>[index1, index2]</code> 的形式返回这两个整数的下标 <code>index1</code> 和 <code>index2</code>。</p><p>你可以假设每个输入 <strong>只对应唯一的答案</strong> ，而且你 <strong>不可以</strong> 重复使用相同的元素。</p><p>你所设计的解决方案必须只使用常量级的额外空间。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：numbers = [2,7,11,15], target = 9\n输出：[1,2]\n解释：2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：numbers = [2,3,4], target = 6\n输出：[1,3]\n解释：2 与 4 之和等于目标数 6 。因此 index1 = 1, index2 = 3 。返回 [1, 3] 。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：numbers = [-1,0], target = -1\n输出：[1,2]\n解释：-1 与 0 之和等于目标数 -1 。因此 index1 = 1, index2 = 2 。返回 [1, 2] 。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>2 &lt;= numbers.length &lt;= 3 * 104</code></li><li><code>-1000 &lt;= numbers[i] &lt;= 1000</code></li><li><code>numbers</code> 按 <strong>非递减顺序</strong> 排列</li><li><code>-1000 &lt;= target &lt;= 1000</code></li><li><strong>仅存在一个有效答案</strong></li></ul><h4 id="思路分析" tabindex="-1"><a class="header-anchor" href="#思路分析"><span>思路分析</span></a></h4><p><strong>根据题目可知</strong>：</p><ul><li>numbers 是一个升序数组</li><li>仅有一个有效答案</li><li>下标从 1 开始</li></ul><p>该题目完全可以利用双指针的方法，首尾开始遍历。</p><ul><li>假设left指向首元素，right指向尾元素</li><li>如果 $numbers [left] + numbers [right] &lt; target $ , 说明当前数太小，将 left指针右移，相反如果大于，则将 right--</li><li>相等则保存 left、right指针在数组中，并返回。返回时不要忘记将 left、right 加 1，因为下标从 1开始</li></ul><h4 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现"><span>代码实现</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numbers<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> right <span class="token operator">=</span> numbers<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                right<span class="token operator">--</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> numbers<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                left <span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n               \n                ints<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n                ints<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n                <span class="token keyword">break</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> ints<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反转字符串系列" tabindex="-1"><a class="header-anchor" href="#反转字符串系列"><span>反转字符串系列</span></a></h2>',20),x={id:"_151-反转字符串中的单词",tabindex:"-1"},w={class:"header-anchor",href:"#_151-反转字符串中的单词"},y={href:"https://leetcode.cn/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"},q=(0,t.Fv)('<p>给你一个字符串 <code>s</code> ，请你反转字符串中 <strong>单词</strong> 的顺序。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p>**注意：**输入字符串 <code>s</code>中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;the sky is blue&quot;\n输出：&quot;blue is sky the&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;  hello world  &quot;\n输出：&quot;world hello&quot;\n解释：反转后的字符串中不能存在前导空格和尾随空格。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 3：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;a good   example&quot;\n输出：&quot;example good a&quot;\n解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 包含英文大小写字母、数字和空格 <code>&#39; &#39;</code></li><li><code>s</code> 中 <strong>至少存在一个</strong> 单词</li></ul><h4 id="思路分析-1" tabindex="-1"><a class="header-anchor" href="#思路分析-1"><span>思路分析</span></a></h4><p>在Java中提供了很多对字符串操作的API，可以直接使用API进行其操作</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 先去掉首尾空格</span>\n        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// \\s+ 可以匹配一个或者多个空字符</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> wordList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 进行反转</span>\n        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span>wordList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 每个单词后边增加空格</span>\n        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> wordList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第二种方法：双指针</strong></p><ul><li>俩个指针倒序遍历字符串，遇到空格停止，然后截取字符串，并将单词放到 res 集合中</li></ul><figure><img src="'+e+'" alt="image-20230927214123859" tabindex="0" loading="lazy"><figcaption>image-20230927214123859</figcaption></figure><ul><li>、跳过单词间的所有空格，将 j 重新指向下一个单词的尾部</li></ul><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>重复上面操作，直到 i 指针跳出循环</li></ul><figure><img src="'+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 先去掉首尾空格</span>\n        s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 将俩个指针指向尾部</span>\n        <span class="token keyword">int</span> i  <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>\n        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 遇到空格停止</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>\n            <span class="token comment">// 截取单词并加入到集合中</span>\n            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// 跳过空格</span>\n            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span> i<span class="token operator">--</span><span class="token punctuation">;</span>\n            j <span class="token operator">=</span> i<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',23),j={id:"_557-反转字符串中的单词-iii",tabindex:"-1"},L={class:"header-anchor",href:"#_557-反转字符串中的单词-iii"},_={href:"https://leetcode.cn/problems/reverse-words-in-a-string-iii/",target:"_blank",rel:"noopener noreferrer"},S=(0,t.Fv)('<p>给定一个字符串 <code>s</code> ，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;Let&#39;s take LeetCode contest&quot;\n输出：&quot;s&#39;teL ekat edoCteeL tsetnoc&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2:</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入： s = &quot;God Ding&quot;\n输出：&quot;doG gniD&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><em>*</em>***提示：*****</strong>*</p><ul><li><code>1 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code> 包含可打印的 <strong>ASCII</strong> 字符。</li><li><code>s</code> 不包含任何开头或结尾空格。</li><li><code>s</code> 里 <strong>至少</strong> 有一个词。</li><li><code>s</code> 中的所有单词都用一个空格隔开。</li></ul><h4 id="思路分析-2" tabindex="-1"><a class="header-anchor" href="#思路分析-2"><span>思路分析</span></a></h4><p>利用Java中的API，先分割，在反转，在组合</p><h4 id="代码实现-1" tabindex="-1"><a class="header-anchor" href="#代码实现-1"><span>代码实现</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\s+&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> split<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n           split<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">,</span>split<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',11),C={id:"_344-反转字符串",tabindex:"-1"},I={class:"header-anchor",href:"#_344-反转字符串"},A={href:"https://leetcode.cn/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"},F=(0,t.Lk)("p",null,[(0,t.eW)("编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 "),(0,t.Lk)("code",null,"s"),(0,t.eW)(" 的形式给出。")],-1),W={href:"https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},z=(0,t.Fv)('<p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = [&quot;h&quot;,&quot;e&quot;,&quot;l&quot;,&quot;l&quot;,&quot;o&quot;]\n输出：[&quot;o&quot;,&quot;l&quot;,&quot;l&quot;,&quot;e&quot;,&quot;h&quot;]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = [&quot;H&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;h&quot;]\n输出：[&quot;h&quot;,&quot;a&quot;,&quot;n&quot;,&quot;n&quot;,&quot;a&quot;,&quot;H&quot;]\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p>',5),E=(0,t.Lk)("li",null,[(0,t.Lk)("code",null,"1 <= s.length <= 105")],-1),$=(0,t.Lk)("code",null,"s[i]",-1),P={href:"https://baike.baidu.com/item/ASCII",target:"_blank",rel:"noopener noreferrer"},T=(0,t.Fv)('<h4 id="思路分析-3" tabindex="-1"><a class="header-anchor" href="#思路分析-3"><span><strong>思路分析</strong></span></a></h4><p>题目要求，不允许使用额外数组，要原地修改。这就需要我们使用到双指针的思想：</p><ul><li>双指针情形一: 指针向中间或两端移动，移动方向始终相对</li><li>双指针情形二： 指针向同侧移动，形成前后指针或快慢指针</li></ul><p>此道题目很明显是情形一，我们需要使用俩个指针，然后将指向的元素交换并移动，直到相遇为止</p><figure><img src="'+c+'" alt="2.gif" tabindex="0" loading="lazy"><figcaption>2.gif</figcaption></figure><h4 id="代码实现-2" tabindex="-1"><a class="header-anchor" href="#代码实现-2"><span>代码实现</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 定义双指针</span>\n        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> right <span class="token operator">=</span> s<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span>\n\n        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 将left与right指向的元素交换</span>\n            <span class="token keyword">char</span> temp <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n            <span class="token comment">// 移动指针</span>\n            left<span class="token operator">++</span><span class="token punctuation">;</span>\n            right<span class="token operator">--</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',7),B={id:"_541-反转字符串-ii",tabindex:"-1"},D={class:"header-anchor",href:"#_541-反转字符串-ii"},Z={href:"https://leetcode.cn/problems/reverse-string-ii/",target:"_blank",rel:"noopener noreferrer"},O=(0,t.Fv)('<p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p><ul><li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li></ul><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;abcdefg&quot;, k = 2\n输出：&quot;bacdfeg&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;abcd&quot;, k = 2\n输出：&quot;bacd&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="思路分析-4" tabindex="-1"><a class="header-anchor" href="#思路分析-4"><span>思路分析</span></a></h4><p>假设字符串的长度为 n:</p><ul><li><p>如果 k &lt;= n &lt; 2k , 就反转 前k个字符</p></li><li><p>如果 n &lt; k , 就反转n个字符</p></li></ul><p>所以在遍历字符串时，只需要每次移动 2k 个位置，找到反转字符串的起始点，判断该起始点与 n 的长度即可。</p><h4 id="代码实现-3" tabindex="-1"><a class="header-anchor" href="#代码实现-3"><span>代码实现</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 每次都从 2k 的下标开始，如果长度不足k则全部翻转，否则翻转前k个字符</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">+=</span> <span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 如果长度满足k个长度，结束下标就为 i+k</span>\n            <span class="token comment">// 否则就反转全部字符串，结束下标为 n</span>\n            <span class="token function">reverse</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token operator">+</span>k<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">char</span> temp <span class="token operator">=</span> chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            chars<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            chars<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span>  temp<span class="token punctuation">;</span>\n\n            left<span class="token operator">++</span><span class="token punctuation">;</span>\n            right<span class="token operator">++</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',12),G={id:"lcr-182-动态口令",tabindex:"-1"},J={class:"header-anchor",href:"#lcr-182-动态口令"},M={href:"https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/",target:"_blank",rel:"noopener noreferrer"},N=(0,t.Fv)('<p>某公司门禁密码使用动态口令技术。初始密码为字符串 <code>password</code>，密码更新均遵循以下步骤：</p><ul><li>设定一个正整数目标值 <code>target</code></li><li>将 <code>password</code> 前 <code>target</code> 个字符按原顺序移动至字符串末尾</li></ul><p>请返回更新后的密码字符串。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: password = &quot;s3cur1tyC0d3&quot;, target = 4\n输出: &quot;r1tyC0d3s3cu&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入: password = &quot;lrloseumgh&quot;, target = 6\n输出: &quot;umghlrlose&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt; password.length &lt;= 10000</code></li></ul><h4 id="思路分析-5" tabindex="-1"><a class="header-anchor" href="#思路分析-5"><span>思路分析</span></a></h4><p>如果不要求空间复杂度的话，极简版：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">dynamicPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 截取移动后边的字符串</span>\n        <span class="token class-name">String</span> substring <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 截取移动的字符串</span>\n        <span class="token class-name">String</span> front <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> substring <span class="token operator">+</span> front<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>如果要求只能在源字符串上进行修改呢？要求时间复杂度为 O(1)</strong></p><p>可以采用多次反转，第一次反转 0~target ，第二次反转 target~ n(n为字符串长度) ，第三次反转整个字符串！</p><figure><img src="'+l+'" alt="image-20231017222624936" tabindex="0" loading="lazy"><figcaption>image-20231017222624936</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token comment">// 如果要求空间复杂度为O(1)</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">dynamicPassword1</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 第一次反转，0~target</span>\n        <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>target<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 第二次反转，target~n</span>\n        <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>target<span class="token punctuation">,</span>password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 第三次反转，整个字符串</span>\n        <span class="token function">reverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>password<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 反转函数</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">char</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            arr<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>\n\n            left<span class="token operator">++</span><span class="token punctuation">;</span>\n            right<span class="token operator">--</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',16),R={id:"_561-数组拆分",tabindex:"-1"},H={class:"header-anchor",href:"#_561-数组拆分"},X={href:"https://leetcode.cn/problems/array-partition/",target:"_blank",rel:"noopener noreferrer"},K=(0,t.Fv)('<p>给定长度为 <code>2n</code> 的整数数组 <code>nums</code> ，你的任务是将这些数分成 <code>n</code> 对, 例如 <code>(a1, b1), (a2, b2), ..., (an, bn)</code> ，使得从 <code>1</code> 到 <code>n</code> 的 <code>min(ai, bi)</code> 总和最大。</p><p>返回该 <strong>最大总和</strong> 。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：nums = [1,4,3,2]\n输出：4\n解释：所有可能的分法（忽略元素顺序）为：\n1. (1, 4), (2, 3) -&gt; min(1, 4) + min(2, 3) = 1 + 2 = 3\n2. (1, 3), (2, 4) -&gt; min(1, 3) + min(2, 4) = 1 + 2 = 3\n3. (1, 2), (3, 4) -&gt; min(1, 2) + min(3, 4) = 1 + 3 = 4\n所以最大总和为 4\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：nums = [6,2,6,5,1,2]\n输出：9\n解释：最优的分法为 (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 104</code></li><li><code>nums.length == 2 * n</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li></ul><h3 id="思路分析-6" tabindex="-1"><a class="header-anchor" href="#思路分析-6"><span>思路分析</span></a></h3><p>题目要求 求得每俩个元素的最小值加起来的和最大。</p><p>那么就尽可能的让俩个元素的最小值较大，也就是较小元素和较小元素组合，较大元素和较大元素组合。</p><p>因此我们可以先升序，然后每俩个元素组合在一起</p><h3 id="代码实现-4" tabindex="-1"><a class="header-anchor" href="#代码实现-4"><span>代码实现</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">arrayPairSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            sum <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',14),Q={id:"_5-最长回文子串",tabindex:"-1"},U={class:"header-anchor",href:"#_5-最长回文子串"},V={href:"https://leetcode.cn/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},Y=(0,t.Fv)('<p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><p><strong>示例 1：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;babad&quot;\n输出：&quot;bab&quot;\n解释：&quot;aba&quot; 同样是符合题意的答案。\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例 2：</strong></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>输入：s = &quot;cbbd&quot;\n输出：&quot;bb&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s</code> 仅由数字和英文字母组成</li></ul><h3 id="思路分析-7" tabindex="-1"><a class="header-anchor" href="#思路分析-7"><span>思路分析</span></a></h3><p>像这种求最值问题基本都可以利用 <code>动态规划</code> 来求解，此题也不例外。</p><p>**定义dp数组及下标含义: **</p><p>dp[i][j] : 表示 s 串在下标 i 和 j区间内是否是回文子串</p><p><strong>确定递推公式</strong></p><p>s[i] 与 s[j] 无非就有俩种情况，相等或者不相等</p><ul><li>s[i] != s[j] ,那么 dp[i][j] = false, 这个无需考虑</li><li>s[i] == s[j] ，有以下几种情况： <ul><li>i == j 说明指向同一个字符，那肯定是回文子串</li><li>i - j == 1, 也就是 i 和 j相差一个字符，并且 s[i] == s[j] 还想等，那么 i ~ j 也是回文子串，例如： aba</li><li>i - j &gt; 1,若是相差多个字符，就需要判断 $S[i+1 , j-1] $ 是否是回文子串了，例如：<code>wttw</code>，子串 tt 是回文子串，那么 wttw 很明显也是，因为首尾元素相等</li></ul></li></ul><p>因此 $ S[i] == S[j]$ 一共有俩种情况： $$ \\left{ \\begin{matrix} j - i &lt;= 1 , true \\ dp[i+1 , j-1] , true \\end{matrix} \\right. $$ <strong>遍历</strong>顺序</p><p>如下图所示，由于我们要得到$ dp[i][j]$ ,是通过计算 $dp[i+1 , j-1] $ 而来，因此循环应该从<strong>下到上，从左到右</strong></p><figure><img src="'+i+'" alt="image-20230925231243004" tabindex="0" loading="lazy"><figcaption>image-20230925231243004</figcaption></figure><p><strong>更新回文子串</strong></p><p>再循环的过程中，要不断更新回文子串的长度</p><h3 id="代码实现-5" tabindex="-1"><a class="header-anchor" href="#代码实现-5"><span>代码实现</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// dp数组，初始为 false</span>\n        <span class="token comment">// 保存 i~j 是否为回文子串</span>\n        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment">// 保存回文子串</span>\n        <span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n        <span class="token comment">// 从下到上，从左到右</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 是回文子串的俩种情况</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j<span class="token operator">-</span>i <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token comment">// 不断更新回文子串</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    res <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> res<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',22),nn={},sn=(0,a(66262).A)(nn,[["render",function(n,s){const a=(0,t.g2)("ExternalLinkIcon");return(0,t.uX)(),(0,t.CE)("div",null,[u,r,(0,t.Lk)("h3",d,[(0,t.Lk)("a",k,[(0,t.Lk)("span",null,[(0,t.Lk)("a",v,[(0,t.eW)("14. 最长公共前缀"),(0,t.bF)(a)])])])]),(0,t.Lk)("p",null,[(0,t.Lk)("a",m,[(0,t.eW)("LeetCode题解"),(0,t.bF)(a)])]),(0,t.Lk)("h3",g,[(0,t.Lk)("a",b,[(0,t.Lk)("span",null,[(0,t.Lk)("a",h,[(0,t.eW)("167. 两数之和 II - 输入有序数组"),(0,t.bF)(a)])])])]),f,(0,t.Lk)("h3",x,[(0,t.Lk)("a",w,[(0,t.Lk)("span",null,[(0,t.Lk)("a",y,[(0,t.eW)("151. 反转字符串中的单词"),(0,t.bF)(a)])])])]),q,(0,t.Lk)("h3",j,[(0,t.Lk)("a",L,[(0,t.Lk)("span",null,[(0,t.Lk)("a",_,[(0,t.eW)("557. 反转字符串中的单词 III"),(0,t.bF)(a)])])])]),S,(0,t.Lk)("h3",C,[(0,t.Lk)("a",I,[(0,t.Lk)("span",null,[(0,t.Lk)("a",A,[(0,t.eW)("344. 反转字符串"),(0,t.bF)(a)])])])]),F,(0,t.Lk)("p",null,[(0,t.eW)("不要给另外的数组分配额外的空间，你必须**"),(0,t.Lk)("a",W,[(0,t.eW)("原地"),(0,t.bF)(a)]),(0,t.eW)("修改输入数组**、使用 O(1) 的额外空间解决这一问题。")]),z,(0,t.Lk)("ul",null,[E,(0,t.Lk)("li",null,[$,(0,t.eW)(" 都是 "),(0,t.Lk)("a",P,[(0,t.eW)("ASCII"),(0,t.bF)(a)]),(0,t.eW)(" 码表中的可打印字符")])]),T,(0,t.Lk)("h3",B,[(0,t.Lk)("a",D,[(0,t.Lk)("span",null,[(0,t.Lk)("a",Z,[(0,t.eW)("541. 反转字符串 II"),(0,t.bF)(a)])])])]),O,(0,t.Lk)("h3",G,[(0,t.Lk)("a",J,[(0,t.Lk)("span",null,[(0,t.Lk)("a",M,[(0,t.eW)("LCR 182. 动态口令"),(0,t.bF)(a)])])])]),N,(0,t.Lk)("h2",R,[(0,t.Lk)("a",H,[(0,t.Lk)("span",null,[(0,t.Lk)("a",X,[(0,t.eW)("561. 数组拆分"),(0,t.bF)(a)])])])]),K,(0,t.Lk)("h2",Q,[(0,t.Lk)("a",U,[(0,t.Lk)("span",null,[(0,t.Lk)("a",V,[(0,t.eW)("5. 最长回文子串"),(0,t.bF)(a)])])])]),Y])}]]),an=JSON.parse('{"path":"/LeetCode/%E5%AD%97%E7%AC%A6%E4%B8%B2.html","title":"字符串","lang":"zh-CN","frontmatter":{"date":"2024-03-28T00:00:00.000Z","category":["算法"],"tag":["字符串","滑动窗口"],"editLink":false,"pageview":false,"star":true,"order":2,"description":"字符串 双指针系列 14. 最长公共前缀 LeetCode题解 167. 两数之和 II - 输入有序数组 给你一个下标从 1 开始的整数数组 numbers ，该数组已按 非递减顺序排列 ，请你从数组中找出满足相加之和等于目标数 target 的两个数。如果设这两个数分别是 numbers[index1] 和 numbers[index2] ，则 1...","head":[["meta",{"property":"og:url","content":"https://www.yzgc.top/LeetCode/%E5%AD%97%E7%AC%A6%E4%B8%B2.html"}],["meta",{"property":"og:site_name","content":"鲨瓜"}],["meta",{"property":"og:title","content":"字符串"}],["meta",{"property":"og:description","content":"字符串 双指针系列 14. 最长公共前缀 LeetCode题解 167. 两数之和 II - 输入有序数组 给你一个下标从 1 开始的整数数组 numbers ，该数组已按 非递减顺序排列 ，请你从数组中找出满足相加之和等于目标数 target 的两个数。如果设这两个数分别是 numbers[index1] 和 numbers[index2] ，则 1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-10T10:55:43.000Z"}],["meta",{"property":"article:author","content":"鲨瓜"}],["meta",{"property":"article:tag","content":"字符串"}],["meta",{"property":"article:tag","content":"滑动窗口"}],["meta",{"property":"article:published_time","content":"2024-03-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-04-10T10:55:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"字符串\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-28T00:00:00.000Z\\",\\"dateModified\\":\\"2024-04-10T10:55:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"鲨瓜\\",\\"url\\":\\"https://www.yzgc.top\\"}]}"]]},"headers":[{"level":2,"title":"双指针系列","slug":"双指针系列","link":"#双指针系列","children":[{"level":3,"title":"14. 最长公共前缀","slug":"_14-最长公共前缀","link":"#_14-最长公共前缀","children":[]},{"level":3,"title":"167. 两数之和 II - 输入有序数组","slug":"_167-两数之和-ii-输入有序数组","link":"#_167-两数之和-ii-输入有序数组","children":[]}]},{"level":2,"title":"反转字符串系列","slug":"反转字符串系列","link":"#反转字符串系列","children":[{"level":3,"title":"151. 反转字符串中的单词","slug":"_151-反转字符串中的单词","link":"#_151-反转字符串中的单词","children":[]},{"level":3,"title":"557. 反转字符串中的单词 III","slug":"_557-反转字符串中的单词-iii","link":"#_557-反转字符串中的单词-iii","children":[]},{"level":3,"title":"344. 反转字符串","slug":"_344-反转字符串","link":"#_344-反转字符串","children":[]},{"level":3,"title":"541. 反转字符串 II","slug":"_541-反转字符串-ii","link":"#_541-反转字符串-ii","children":[]},{"level":3,"title":"LCR 182. 动态口令","slug":"lcr-182-动态口令","link":"#lcr-182-动态口令","children":[]}]},{"level":2,"title":"561. 数组拆分","slug":"_561-数组拆分","link":"#_561-数组拆分","children":[{"level":3,"title":"思路分析","slug":"思路分析-6","link":"#思路分析-6","children":[]},{"level":3,"title":"代码实现","slug":"代码实现-4","link":"#代码实现-4","children":[]}]},{"level":2,"title":"5. 最长回文子串","slug":"_5-最长回文子串","link":"#_5-最长回文子串","children":[{"level":3,"title":"思路分析","slug":"思路分析-7","link":"#思路分析-7","children":[]},{"level":3,"title":"代码实现","slug":"代码实现-5","link":"#代码实现-5","children":[]}]}],"git":{"createdTime":1712746543000,"updatedTime":1712746543000,"contributors":[{"name":"“杨照光”","email":"“yangzhaoguang@ciictec.com”","commits":1}]},"readingTime":{"minutes":10.89,"words":3266},"filePathRelative":"LeetCode/字符串.md","localizedDate":"2024年3月28日","excerpt":"\\n<h2>双指针系列</h2>\\n<h3><a class=\\"header-anchor\\" href=\\"#_14-最长公共前缀\\"><span></span></a><a href=\\"https://leetcode.cn/problems/longest-common-prefix/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">14. 最长公共前缀</a></h3>\\n<p><a href=\\"https://leetcode.cn/problems/longest-common-prefix/solutions/2459021/problem-14-zui-chang-gong-gong-qian-zhui-tlgr/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">LeetCode题解</a></p>","autoDesc":true}')}}]);